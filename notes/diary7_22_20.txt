Look at  data/7_21/env_evolveA.csv:  when gl_reps=3, nflipbits=0, does not find optimum in 100000 steps.

Simpler case:  data/7_21/env_evolveD.jl  2 inputs, 2 outputs, gl_reps=2, nflipbits=0.

Problem:  The goal has 2 identical components.  Most of the circuits for computing these identical
outputs will overlap, so most mutations will change the outputs identically.

Suppose that the output components are equal and 1 bit away from the goal components.
Suppose that mutation makes one output component correct.

Using WSL modified code:
Problems:  with repetitions=2
julia> num_flipped_bits=0
0
julia> repetitions
2
julia> f_bits_list = flipped_bits_list( num_flipped_bits, repetitions-1, numinputs )
0-element Array{UInt16,1}
julia>  goal = env_goal( g, f_bits_list )
1-element Array{UInt16,1}:
 0x0008
julia> goal = perturb_goal( g, num_flipped_bits, repetitions, numinputs )
bits_to_perturb: Int64[]
rp: 0x0000
bits_to_perturb: Int64[]
rp: 0x0000
3-element Array{UInt16,1}:
 0x0008
 0x0008
 0x0008

Thus, env_goal is returning a 1 component goal (with modifications to flipped_bits_list()),
and perturb_goal is returning a 3 component goal.
