Tested whether my approximate solution to the assignment problem gave similar results to the 
exact solution to the assignment problem used in function match_score() used in the run on 7/19.  
The exact solution used Combinatorics.combinations() to evaluate all solutions to the assignment
problem.

Note that the approximate run had to use avgfitnes==true while the exact run used avgfitness=false.
Other runs have not shown significant difference between avgfitness==false and avgfitness=true.
But the heuristic could be adapted to avgfitness==false.

The approximate run is data/7_25/env_evolve7_25A.{jl,csv} while the exact solution run is  
data/7_19/env_evolveC.{jl,csv}.

Conclusion:  The approximate elapsed time with 16 cores for exact was over 12 hours, while
for perm heuristic was 30 minutes.  So the approximate solution over an order of magnitude faster.

Complexity and degeneracy are very close for the two runs.  nactive is somewhat different---may
not be significant.

I need to be cautious in applying my perm_heuristic solution to cases beyond noutputs=8.
An alternative seems to that scipy may include an exact algorithm solution to the assignment
problem, and I should be able to call it.
