Further description of the two methods of computing mutual information for discrete alleles.
Method 1:  pops_to_dist()   Apparently used by Macia & Sole
Method 2:  pops_to_tbl()  or  sherwin_mutual_information()

Assume 2 populations P and Q of discrete alleles (Int64 or MyInt of String)

pops_to_dist()   
  mutual_information(P,Q) = entropy(P) + entropy(Q) - joint_entropy(P,Q)
       = entropy(P) + entropy(Q) - entropy(pops_to_dist(P,Q)
  Maximum joint_entropy is when there are no repeated pairs (P[i],Q[i]).
  However, repeated pairs requires repeated elements in P and Q, and these will reduce
     the entropy of P and Q.
Examples:
No repeated elements in either P or Q:
julia> (P0,Q0)
(UInt8[0x00, 0x01, 0x02, 0x03], UInt8[0x04, 0x05, 0x06, 0x07])
julia> (entropy(P0),entropy(Q0),joint_entropy(P0,Q0),mutual_information(P0,Q0))
(2.0, 2.0, 2.0, 2.0)

Repeated elements in P and Q but no repeated pairs
julia> (P1,Q1)
(UInt8[0x00, 0x00, 0x01, 0x02], UInt8[0x03, 0x04, 0x05, 0x05])
julia> (entropy(P1),entropy(Q1),joint_entropy(P1,Q1),mutual_information(P1,Q1))
(1.5, 1.5, 2.0, 1.0)

julia> (P2,Q2)
(UInt8[0x00, 0x00, 0x01, 0x02], UInt8[0x05, 0x05, 0x03, 0x04])
julia> (entropy(P2),entropy(Q2),joint_entropy(P2,Q2),mutual_information(P2,Q2))
(1.5, 1.5, 1.5, 1.5)

Note that joint_entropy(P,Q) decreased while entropy(P) and entropy(Q) did not change,
   so mutual_information(P,Q) increased due to the repeated pair (0x0, 0x5).


pops_to_tbl()
  mutual_information([P,Q]) = sherwin_mutual_information(pops_to_tbl([P,Q]))
  Maximum sherwin_mutual_information happens when there are repeated order pairs P[i]==Q[j]
  Note that the order of P and of Q does not affect the result.
julia> (P3,Q3)
(UInt8[0x00, 0x00, 0x00, 0x01, 0x02], UInt8[0x03, 0x03, 0x04, 0x01, 0x02])
julia> pops_to_tbl([P3,Q3])
2×5 Array{Float64,2}:
 0.3  0.1  0.1  0.0  0.0
 0.0  0.1  0.1  0.2  0.1
julia> mutual_information([P3,Q3])
0.6000000000000001
In this example, there are 3 copies of 0x0 in P3 and none in Q3.  This gives the first column of the table.
There are two pairs P3[i] == Q3[j] (for 0x1 and 0x2), and these give columns 2 and 3.
There 3 elements of Q3 that don't match any elements of P3, and one is repeated twice.

julia> (P4,Q4)
(UInt8[0x00, 0x00, 0x00, 0x01, 0x02], UInt8[0x00, 0x00, 0x04, 0x03, 0x02])
julia> pops_to_tbl([P4,Q4])
2×5 Array{Float64,2}:
 0.3  0.1  0.1  0.0  0.0
 0.2  0.0  0.1  0.1  0.1
julia> mutual_information([P4,Q4])
0.3145247027726661
In this example, 0x0 matches 3 elements of P4 and 2 elements of Q4.  This gives column 1.
0x2 matches 1 element of P4 and 1 element of Q4.  This gives column 3.
0x1 appears once in P4 and not in Q4.  This gives column 2.
0x3 and 0x4 occur once in Q4 and not in P4.  These correspond to columns 4 and 5.

      

  
