Results on evolvability, robustness, complexity:


4x1 results
Used nrepeats=200, ntries = 300.
julia> using Plots
Command for 4x1 11 ints plots.
julia> gcdf = read_dataframe("geno_complexity10_11E.csv")
julia> scatter_plot( gcdf, :complexity, :evolvability, "4x1R", 11, 8 )
julia> scatter_plot( gcdf, :complexity, :robustness, "4x1R", 11, 8 )
julia> scatter_plot( gcdf, :evolvability, :robustness, "4x1R", 11, 8 )

4x1 frequencies results
lycosa
julia> ints11_8 = [cdf[cdf.goals.==@sprintf("0x%x",gcdf.goal[i]),:ints11_8][1] for i = 1:size(gcdf)[1]]
julia> gcdf.ints11_8 = ints11_8
julia> gcdf.log_ints11_8 = map(x->log10(x),gcdf.ints11_8)
Windows
julia> gcdf = read_dataframe("geno_pheno_complexity10_11freqs.csv")
100Ã—18 DataFrame. 
julia> gcdf_names=names(gcdf)
julia> gcdf_names[18] = "frequency"
julia> rename!(gcdf, Symbol.(gcdf_names))
julia> gcdf.log_freq = map(x->log10(x),gcdf.frequency)
100-element Array{Float64,1}:
julia> scatter_plot(gcdf,:evolvability,:log_freq,"4x1R",11,8)
julia> scatter_plot(gcdf,:robustness,:log_freq,"4x1R",11,8)
julia> scatter_plot(gcdf,:complexity,:log_freq,"4x1R",11,8)

3x3 results.
gcdf = read_dataframe("geno_complexity10_11R.csv")
scatter_plot( gcdf, :complexity, :evolvability, "3x3R", 14, 9 )
scatter_plot( gcdf, :complexity, :robustness, "3x3R", 14, 9 )
scatter_plot( gcdf, :evolvability, :robustness, "3x3R", 14, 9 )
Results are not as consistent, especially evolvability vs complexity.

4x2 results
100 goals
200 nrepeats
300 ntries
julia> gcdf = read_dataframe("geno_complexity10_11T.csv")
julia> scatter_plot( gcdf, :evolvability, :robustness, "4x2R", 16, 11 )
julia> scatter_plot( gcdf, :complexity, :robustness, "4x2R", 16, 11 )
julia> scatter_plot( gcdf, :complexity, :evolvability, "4x2R", 16, 11 )
julia> scatter_plot( gcdf, :nactive, :evolvability, "4x2R", 16, 11 )
Results are almost as good as 4x1.



Counts file results:
Found mistake in 10_9 runs for counts, namely default_funcs() was set to Macia (NAND only) get set.
Did two more runs on surt2.

julia> @time ol_11ints_8lb = count_outputs_parallel( 10^10, 4, 1, 11, 8 )    # 11 ints 8 levsback
julia> fa = findall(x->Int64(x)==0,ol_11ints_8lb)
0-element Array{Int64,1}
julia> dol = map(x->Int64(x),ol_11ints_8lb);
julia> minimum(dol)
2                    

julia> @time ol_11ints_5lb = count_outputs_parallel( 10^10, 4, 1, 11, 5 )    # 11 ints, 5 levsback
julia> fa = findall(x->Int64(x)==0, ol_11ints_5lb)
159-element Array{Int64,1)

Now consistent with earlier results.


ints11_5 = [df[df.goals.==@sprintf("0x%x",evdf.goal[i][]),:ints11_5][1] for i = 1:size(evdf)[1] ]
