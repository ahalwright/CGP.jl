Removed funcs keyword argument from neutral_evolution and added funcs as an argument to all calls to neutal_evolution().

Trying to understand the computation of Tononi complexity.
Created a temporary version of the complexity5() function renamed to cmplx5() in cmplx5.jl.
Created a temporary version of the complexity6() function renamed to cmplx6() in cmplx5.jl.
Created a temporary version of the complexity7() function renamed to cmplx7() in cmplx5.jl.

An explanation in terms of mutual information might be more intuitive---use cmplx6.
Mutual information is a measure of statistical dependence. 
It will be largest for circuits where the number of gates is equal to the K complexity of the corresponding phenotypes.
When there are inactive gates, these may have litte mutual information with other gates.
Our results are dependent on using a relatively small number of gates.

Supplementary info to GECCO paper gives an explanation and calling cmplx5() prints intermediate values:

In the following, 0x00 is replaced by 0x.  4 funcs.
p = Parameters(2,1,3,3); funcs=default_funcs(p)[1:4]
julia> print_circuit(cp2)
circuit((1,2), ((3,NAND,1,2), (4,OR,3,1), (5,AND,3,2)))
julia> print_circuit(cp6)
circuit((1,2), ((3,AND,2,1), (4,NOR,1,2), (5,NOR,3,4)))
julia> number_active(cp2), number_active(cp6) # (2, 3)
julia> cmplx5(cp2) # output [0x02] 
X:    UInt16[0x07, 0x00, 0x02]
[0 1 1 1; 0 0 0 0; 0 0 1 0]
gbX: UInt16[0x04, 0x05, 0x04, 0x00]
[0 1 0 0; 0 1 0 1; 0 1 0 0; 0 0 0 0]
ent_X: 1.5
ent x: UInt16[0x01, 0x01, 0x01, 0x00]  ent(x): 0.8112781244591328
ent x: UInt16[0x00, 0x00, 0x00, 0x00]  ent(x): 0.0
ent x: UInt16[0x00, 0x01, 0x00, 0x00]  ent(x): 0.8112781244591328
ent x: UInt16[0x02, 0x02, 0x02, 0x00]  ent(x): 0.8112781244591328
ent x: UInt16[0x02, 0x03, 0x02, 0x00]  ent(x): 1.5
ent x: UInt16[0x00, 0x01, 0x00, 0x00]  ent(x): 0.8112781244591328
ent x: UInt16[0x04, 0x05, 0x04, 0x00]  ent(x): 1.5
ents: [[0.8112781244591328, 0.0, 0.8112781244591328], [0.8112781244591328, 1.5, 0.8112781244591328], [1.5]]
ents_avg: [0.5408520829727552, 1.0408520829727552, 1.5]
summand: [0.04085208297275522, 0.04085208297275522, 0.0]
k: 1  s: UInt16[0x07]  get_bits: UInt16[0x01, 0x01, 0x01, 0x00]ent x: UInt16[0x01, 0x01, 0x01, 0x00]  ent(x): 0.8112781244591328
k: 1  s: UInt16[0x00]  get_bits: UInt16[0x00, 0x00, 0x00, 0x00]ent x: UInt16[0x00, 0x00, 0x00, 0x00]  ent(x): 0.0
k: 1  s: UInt16[0x02]  get_bits: UInt16[0x00, 0x01, 0x00, 0x00]ent x: UInt16[0x00, 0x01, 0x00, 0x00]  ent(x): 0.8112781244591328
k: 2  s: UInt16[0x07, 0x00]  get_bits: UInt16[0x02, 0x02, 0x02, 0x00]ent x: UInt16[0x02, 0x02, 0x02, 0x00]  ent(x): 0.8112781244591328
k: 2  s: UInt16[0x07, 0x02]  get_bits: UInt16[0x02, 0x03, 0x02, 0x00]ent x: UInt16[0x02, 0x03, 0x02, 0x00]  ent(x): 1.5
k: 2  s: UInt16[0x00, 0x02]  get_bits: UInt16[0x00, 0x01, 0x00, 0x00]ent x: UInt16[0x00, 0x01, 0x00, 0x00]  ent(x): 0.8112781244591328
k: 3  s: UInt16[0x07, 0x00, 0x02]  get_bits: UInt16[0x04, 0x05, 0x04, 0x00]ent x: UInt16[0x04, 0x05, 0x04, 0x00]  ent(x): 1.5
0.08170416594551044

julia> cmplx5(cp6) # output: [0x06]
X:    UInt16[0x08, 0x01, 0x06]
[1 0 0 0; 0 0 0 1; 0 1 1 0]
gbX: UInt16[0x02, 0x01, 0x01, 0x04]
[0 0 1 0; 0 0 0 1; 0 0 0 1; 0 1 0 0]
ent_X: 1.5
ent x: UInt16[0x00, 0x00, 0x00, 0x01]  ent(x): 0.8112781244591328
ent x: UInt16[0x01, 0x00, 0x00, 0x00]  ent(x): 0.8112781244591328
ent x: UInt16[0x00, 0x01, 0x01, 0x00]  ent(x): 1.0
ent x: UInt16[0x01, 0x00, 0x00, 0x02]  ent(x): 1.5
ent x: UInt16[0x00, 0x01, 0x01, 0x02]  ent(x): 1.5
ent x: UInt16[0x02, 0x01, 0x01, 0x00]  ent(x): 1.5
ent x: UInt16[0x02, 0x01, 0x01, 0x04]  ent(x): 1.5
ents: [[0.8112781244591328, 0.8112781244591328, 1.0], [1.5, 1.5, 1.5], [1.5]]
ents_avg: [0.8741854163060886, 1.5, 1.5]
summand: [0.3741854163060886, 0.5, 0.0]
k: 1  s: UInt16[0x08]  get_bits: UInt16[0x00, 0x00, 0x00, 0x01]ent x: UInt16[0x00, 0x00, 0x00, 0x01]  ent(x): 0.8112781244591328
k: 1  s: UInt16[0x01]  get_bits: UInt16[0x01, 0x00, 0x00, 0x00]ent x: UInt16[0x01, 0x00, 0x00, 0x00]  ent(x): 0.8112781244591328
k: 1  s: UInt16[0x06]  get_bits: UInt16[0x00, 0x01, 0x01, 0x00]ent x: UInt16[0x00, 0x01, 0x01, 0x00]  ent(x): 1.0
k: 2  s: UInt16[0x08, 0x01]  get_bits: UInt16[0x01, 0x00, 0x00, 0x02]ent x: UInt16[0x01, 0x00, 0x00, 0x02]  ent(x): 1.5
k: 2  s: UInt16[0x08, 0x06]  get_bits: UInt16[0x00, 0x01, 0x01, 0x02]ent x: UInt16[0x00, 0x01, 0x01, 0x02]  ent(x): 1.5
k: 2  s: UInt16[0x01, 0x06]  get_bits: UInt16[0x02, 0x01, 0x01, 0x00]ent x: UInt16[0x02, 0x01, 0x01, 0x00]  ent(x): 1.5
k: 3  s: UInt16[0x08, 0x01, 0x06]  get_bits: UInt16[0x02, 0x01, 0x01, 0x04]ent x: UInt16[0x02, 0x01, 0x01, 0x04]  ent(x): 1.5
0.8741854163060886

julia> cmplx6(cp2)
k: 1  subset_pairs: [([1], [2, 3]), ([2], [1, 3]), ([3], [1, 2])]
X_pairs: Tuple{Vector{UInt16}, Vector{UInt16}}[([0x07], [0x00, 0x02]), ([0x00], [0x07, 0x02]), ([0x02], [0x07, 0x00])]
gbX_pairs: Tuple{Vector{UInt16}, Vector{UInt16}}[([0x01, 0x01, 0x01, 0x00], [0x00, 0x01, 0x00, 0x00]), ([0x00, 0x00, 0x00, 0x00], [0x02, 0x03, 0x02, 0x00]), ([0x00, 0x01, 0x00, 0x00], [0x02, 0x02, 0x02, 0x00])]
k: 1  mutints: [0.12255624891826566, 0.0, 0.12255624891826566]
k: 1  sum mutual informaiton: 0.08170416594551044
0.08170416594551044

julia> cmplx6(cp6)
k: 1  subset_pairs: [([1], [2, 3]), ([2], [1, 3]), ([3], [1, 2])]
X_pairs: Tuple{Vector{UInt16}, Vector{UInt16}}[([0x08], [0x01, 0x06]), ([0x01], [0x08, 0x06]), ([0x06], [0x08, 0x01])]
gbX_pairs: Tuple{Vector{UInt16}, Vector{UInt16}}[([0x00, 0x00, 0x00, 0x01], [0x02, 0x01, 0x01, 0x00]), ([0x01, 0x00, 0x00, 0x00], [0x00, 0x01, 0x01, 0x02]), ([0x00, 0x01, 0x01, 0x00], [0x01, 0x00, 0x00, 0x02])]
k: 1  mutints: [0.8112781244591329, 0.8112781244591329, 1.0]
k: 1  sum mutual informaiton: 0.8741854163060886
0.8741854163060886

Wrote function to_binary_matrix( row_list::Vector{MyInt}, numinputs::Int64 )  in cmplx5.jl (move to InfTheory)
Another way of computing get_bits() from InfTheory.jl
X'==gbX[end:-1:1,(end-c.params.numinteriors+1):end]  # true
The number of elements in the list X is p.numinteriors, this is the number of rows in matrix X and the number of columns in X'
function test_alt_get_bits( c::Chromosome )  in cmplx5.jl succeeds with Parameters(5,1,12,8)
