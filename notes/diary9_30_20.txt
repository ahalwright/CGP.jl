Definition of the complexity of a goal:  Smallest (in terms of interior nodes and levels back)
circuit that outputs the goal.

Wrote functions in src/build_chromosome.jl that implemented two versions of representations
of chromosomes:
  1.  List of inputs to the interior nodes.
  2.  Integer (Int64)
As of this writing, does not include the gate types of interior nodes, so only works with NAND gates.

Includes conversion in each direction between these representations and circuits.

Enumerates all chromosomes and outputs corresponding to a given parameter setting.

Note that build_all_genes() was running out of memory on lycosa.

Example (surt2):
julia> p = Parameters( numinputs=3, numoutputs=1, numinteriors=7, numlevelsback=4) 
julia> @time (gl,il)=build_all_genes(p);
julia> funcs = default_funcs(p.numinputs)
julia> @time out_list = build_outputs_list( p, funcs, gl ) 
15927.642203 seconds (33.97 G allocations: 1.288 TiB, 66.19% gc time)  [4.4 hours]
150994944-element Array{Array{UInt8,1},1}:
 [0x5]
julia> length(unique(out_list))
215 

Example (surt2):
julia> p = Parameters( numinputs=3, numoutputs=1, numinteriors=8, numlevelsback=3 )
Parameters(1, 4, 0.05, 0.0, 3, 1, 2, 8, 3)   
julia> funcs = default_funcs(p.numinputs) 
julia> @time out_list = build_outputs_list( p, funcs, gl )
2702.156744 seconds (10.88 G allocations: 423.370 GiB, 38.62% gc time)   [45 minutes]
43046721-element Array{Array{UInt8,1},1}:
 [0xaa]
julia> length(unique(out_list))
166  

Idea:  Multiple levels-back for each gate, eg. 4 and 3 or even 5 and 3.  Should enable 8 ints.


TODO:
Write function to save integers and outputs to a data file.  DONE.
Try multiple levels-back.
Write backtracking search to find size of neutral network.
Do writeup for Cheyenne.
