Renamed fnc.jl to Fnc.jl and made fnc.jl a link to Fnc.jl.
Fnc.jl  is find_network_components or find_genotype_network_components.

Wrote rand_evo_walk() and rand_evo_walk_mutate_all() in Fnc.jl.
rand_evo_walk() computes a random neutral (phenotype-preserving) neutral walk starting
   at a Chromosome/LinCircuit and counts the number of unique genotypes visited.
rand_evo_walk_mutate_all() computes a random neutral (phenotype-preserving) neutral walk starting
   at a Chromosome/LinCircuit and counts the number of unique genotypes generated by 
   computing mutate_all() for each genotype of the random walk.
The objective is to estimate the number of genotypes in an NC (neutral component) of the 
   inverse of a phenotype in the genotype network which has genotypes as nodes and one-point
   mutations as edges.

Examples:
 rand_evo_walk( random_chromosome(p,funcs), 10, 2 )
 rand_evo_walk( rand_lcircuit(p,funcs), 10, 2 )      
 rand_evo_walk_mutate_all( random_chromosome(p,funcs), 10, 2 )
 rand_evo_walk_mutate_all( rand_lcircuit(p,funcs), 10, 2 )

All of these work.

Also, rewrote mutate_all() in LinCircuit.jl and in Chromosome.jl 
    to give compatible results under all keyword variables, 
    and modified kolmogorov_complexity() in Complexity.jl to work with the
    revised mutate_all() in Chromosome.jl.  The new and the old versions of
    kolmogorov_complexity() give identical results with Random.seed!(1).

TODO:  mutate_all() in Chromosome.jl is very complicated and could likely 
    be greatly simplified by following the pattern of mutate_all() in LinCircuit.jl

