Objective:  relate complexity, frequency, steps or log_steps (difficulty of evolution)

Compare with Figures 2A and 2C of Schaper and Louis (2014) which plot log discovery time vs. frequency
in support of their claim that discovery time of the phenotype p scales to the first order as 1/F_p.

Ran data/10_27/run_geno_complexityE.jl on surt2 with 20 processes to produce geno_complexity10_27E.csv
and copied to lycosa.
julia> @time include("../data/10_27/run_geno_complexityG.jl")  # 10 gates and 5 levsback

Revised the function consolidate_dataframe() in Analyze.jl and ran to reduced from 500 rows to 100 rows (ngoals).
ndf = consolidate_dataframe("../data/10_27/geno_complexity10_27F.csv","../data/10_27/geno_complexity10_27Fcons.csv")
Result:  data/10_27/geno_complexity10_27Econs.csv.
ndf = consolidate_dataframe("../data/10_27/geno_complexity10_27G.csv","../data/10_27/geno_complexity10_27Gcons.csv")
Result:  data/10_27/geno_complexity10_27Gcons.csv.

Wrote a new function add_counts_to_dataframe() in RecordOutputs.jl to add ints11_8 counts for the goals in this file .
pdf = add_counts_to_dataframe( ndf, "../data/counts/count_out_4x1_all_ints_10_10.csv",:ints11_8 )
pdf = add_counts_to_dataframe( ndf, "../data/counts/count_out_4x1_all_ints_10_10.csv",:ints10_5 )
julia> ndf = cdf[DataFrames.Not(77),:]    # removed high frequency outlier  # only for E file
julia> logf = [ log10(ndf.ints11_8[i]) for i = 1:length(ndf.ints11_8) ]  # calculate log frequencies 
julia> logf = [ log10(ndf.ints10_5[i]) for i = 1:length(ndf.ints10_5) ]  # calculate log frequencies for the G file
julia> insertcols!(pdf,size(pdf)[2]+1,:log_freq=>logf )   # same for F and G files
julia> write_dataframe_with_comments(pdf,"../data/10_27/geno_complexity10_27F.csv","../data/10_27/geno_complexity10_27Fncons.csv")  
julia> write_dataframe_with_comments(pdf,"../data/10_27/geno_complexity10_27G.csv","../data/10_27/geno_complexity10_27Gccons.csv")  

Added 10/30:  The geno_complexity10_27F.csv file was overwritten by the geno_complexity10_27G.csv file.  
So I deleted geno_complexity10_27F.csv.
But the geno_complexity10_27Fncons.csv and geno_complexity10_27Fncons.csv  are correct.

# In Windows Julia
# Two of three examples of scatter plots created.
julia> scatter( cdf.complexity, cdf.log_avg_steps, title="log steps vs complexity", xlabel="complexity", ylabel="log steps",label="")
julia> savefig("geno_complexity10_27Fncons_logsteps_vs_complexity.png")
julia> scatter( cdf.complexity, cdf.log_freq, title="log frequency vs complexity", xlabel="complexity", ylabel="log frequency",label="")
julia> savefig("geno_complexity10_27Fncons_logfreq_vs_complexity.png")

julia> scatter( cdf.complexity, cdf.log_avg_steps, title="log steps vs complexity 10 5", xlabel="complexity", ylabel="log steps",label="")
julia> savefig("geno_complexity10_27Gccons_logsteps_vs_complexity_10_5.png")
julia> scatter( cdf.complexity, cdf.log_freq, title="log frequency vs complexity_10_5", xlabel="complexity", ylabel="log frequency",label="")
julia> savefig("geno_complexity10_27Gccons_logfreq_vs_complexity_10_5.png")
julia> scatter( cdf.log_freq, cdf.log_avg_steps,title="log steps vs log frequency 10_5", xlabel="log frequency", ylabel="log steps",label="")

Conclusion:  Not all that much difference between F 11 ints 8 lb and G 10 ints 5 lb.
logsteps vs complexity:   G has less variance about regression line
logsteps vs log freq      G has less variance about regression line, G is more linear
log freq vs complexity    G has more variance about regression line.
None of these differences are necessarily significant.

10/30/20 but in data/10_27:
@time include("../data/10_27/run_geno_complexityM.jl")   # 11 ints, 8 lb
10595 seconds
@time include("../data/10_27/run_geno_complexityN.jl")   # 11 ints, 8 lb 
3405 seconds
Copied both files to lyocsa
Combined into one file geno_complexity10_27MN.csv
julia> cmndf = consolidate_dataframe("../data/10_27/geno_complexity10_27MN.csv","../data/10_27/geno_complexity10_27MNcons.csv") 
Combined geno_complexity10_27MNcons.csv with geno_complexity10_27Fcons.csv  into  geno_complexity10_27FMNcons.csv
julia> fmndf = read_dataframe("../data/10_27/geno_complexity10_27FMNcons.csv") 
julia> cfmndf = add_counts_to_dataframe( fmndf, "../data/counts/count_out_4x1_all_ints_10_10.csv",:ints11_8 ) 
julia> write_dataframe_with_comments(cfmndf,  "../data/10_27/geno_complexity10_27FMNcons.csv", "../data/10_27/geno_complexity10_27FMNccons.csv")
# So now geno_complexity10_27FMNccons.csv is a 600 goal 11 ints 8 lb file.


====================================================================================
# Wrote functions neutral_walk_complexity() and run_neutral_walk_complexity()
#    in file  neutral_walk_connectivity.jl.

Result: 
julia> run_neutral_walk_complexity( [[0x0005],[0x0017],[0x0049]], p, 10, 4, 200000, 40 )
goal: [0x0005]  w_count:     310  w_mean: 3.766  w_max: 6.543  w_min: 1.896  w_std: 0.991  w_q90: 5.282  w_q95: 5.437  w_q99: 6.225
goal: [0x0005]  n_count:   35400  n_mean: 3.842  n_max: 7.509  n_min: 0.000  n_std: 1.147  n_q90: 5.422  n_q95: 5.833  n_q99: 6.430
goal: [0x0017]  w_count:     310  w_mean: 5.016  w_max: 7.165  w_min: 3.046  w_std: 1.254  w_q90: 6.765  w_q95: 6.863  w_q99: 7.037
goal: [0x0017]  n_count:   35400  n_mean: 4.965  n_max: 8.281  n_min: 1.574  n_std: 1.229  n_q90: 6.632  n_q95: 6.888  n_q99: 7.318
goal: [0x0049]  w_count:     310  w_mean: 6.186  w_max: 8.712  w_min: 3.545  w_std: 1.221  w_q90: 7.836  w_q95: 7.836  w_q99: 8.410
goal: [0x0049]  n_count:   35400  n_mean: 6.005  n_max: 9.265  n_min: 1.960  n_std: 1.255  n_q90: 7.594  n_q95: 7.836  n_q99: 8.410

julia> run_neutral_walk_complexity( [[0x0005],[0x0017],[0x0049]], p, 2, 20, 200000, 40 )
goal: [0x0005]  w_count:      62  w_mean: 2.488  w_max: 4.809  w_min: 1.639  w_std: 0.821  w_q90: 3.589  w_q95: 4.205  w_q99: 4.589
goal: [0x0005]  n_count:    7080  n_mean: 2.779  n_max: 6.627  n_min: 0.000  n_std: 1.017  n_q90: 4.218  n_q95: 4.572  n_q99: 5.233
goal: [0x0017]  w_count:      62  w_mean: 4.786  w_max: 6.856  w_min: 3.381  w_std: 1.424  w_q90: 6.236  w_q95: 6.276  w_q99: 6.709
goal: [0x0017]  n_count:    7080  n_mean: 4.790  n_max: 8.357  n_min: 0.225  n_std: 1.449  n_q90: 6.598  n_q95: 7.027  n_q99: 7.598
goal: [0x0049]  w_count:      62  w_mean: 6.403  w_max: 7.396  w_min: 5.940  w_std: 0.531  w_q90: 7.296  w_q95: 7.306  w_q99: 7.396
goal: [0x0049]  n_count:    7080  n_mean: 6.236  n_max: 8.653  n_min: 2.437  n_std: 0.925  n_q90: 7.306  n_q95: 7.531  n_q99: 8.036
