julia> s+=1;Random.seed!(s);(df,pop,phenotypes,predecessors,fitnesses,complexities,numgates)=run_pop_evolve(1,p,popsize,g,ngens,mutrate,uniform_start=false); df
pop_evolve goal: UInt16[0x0011]
pop_evolve: goal: UInt16[0x0011]  psize: 20  ngens: 10  mutrate: 0.25
1×8 DataFrame
│ Row │ goal     │ ngens │ numpops │ popsize │ mutrate │ evolvability │ maxfit  │ maxfit_gen │
│     │ Array…   │ Int64 │ Int64   │ Int64   │ Float64 │ Int64        │ Float64 │ Int64      │
├─────┼──────────┼───────┼─────────┼─────────┼─────────┼──────────────┼─────────┼────────────┤
│ 1   │ [0x0011] │ 10    │ 1       │ 20      │ 0.25    │ 23           │ 1.0     │ 7          │ 

julia> findmax(fitnesses[7,:])
(1.0, 4)

julia> preds_phenos_fits(predecessors, 7, 4)
7-element Array{Tuple{UInt16,Float64},1}:
 (0x00dd, 0.5)
 (0x0090, 0.75)
 (0x0090, 0.75)
 (0x0099, 0.75)
 (0x00c0, 0.5)
 (0x0000, 0.75)
 (0x0011, 1.0) 

julia> preds_phenos_fits(predecessors, df[1,:maxfit_gen], findmax(fitnesses[df[1,:maxfit_gen],:])[2])
7-element Array{Tuple{UInt16,Float64},1}:
 (0x00dd, 0.5)
 (0x0090, 0.75)
 (0x0090, 0.75)
 (0x0099, 0.75)
 (0x00c0, 0.5)
 (0x0000, 0.75)
 (0x0011, 1.0)

julia> preds_fit_decreases(predecessors, df[1,:maxfit_gen], findmax(fitnesses[df[1,:maxfit_gen],:])[2])
1
