Constructing a genotype that maps to any given phenotype ph by OR of unit bit strings.

I am going to use the Julia functions for bitwise operations.
These include ~ for negation:  e. g. ~11110000 = 00001111, ~11001100 = 00110011, etc.
And they include & for bitwise AND and | for bitwise OR.  This makes it easy for me to check results using Julia.

Our genotypes are digital logic gate circuits.  The logic gates do bitwise logical operations on unsigned integers.

The genotype-phenotype map applied to a genotype evaluates evaluates the logic gate circuit of the genotype applied
to the standard context.

The standard context for n = number inputs = 2 is [0xc, 0xa] = [1100, 1010], and the standard context for n = 3 is
[0xf0, 0xcc, 0xaa] = [11110000, 11001100, 10101010].  These are denoted by [ctx1, ctx2] and [ctx1, ctx2, ctx3] respectively.
They are computed by function construct_context( n::Int64 ).

Thus, for n = 2,
ctx1 = 0xc = 1100
ctx2 = 0xa = 1010 
For n = 3:
ctx1 = 0xf0 = 11110000
ctx2 = 0xcc = 11001100
ctx3 = 0xaa = 10101010

We can construct what I will call the unit bit strings:
Note that for n = 2: 
u1 =  ctx1 &  ctx2  = 0x8 = 1000
u2 =  ctx1 & ~ctx2  = 0x4 = 0100
u3 = ~ctx1 &  ctx2  = 0x2 = 0010
u4 = ~ctx1 & ~ctx2  = 0x1 = 0001

And for n = 3:
u1 = ctx1 & ctx2 & ctx3    = 0x80 = 10000000
u3 = ctx1 & ctx2 & ~ctx3   = 0x40 = 01000000
u3 = ctx1 & ~ctx2 & ctx3   = 0x20 = 00100000
u4 = ctx1 & ~ctx2 & ~ctx3  = 0x10 = 00010000
u5 = ~ctx1 & ctx2 &  ctx3  = 0x08 = 00001000
u6 = ~ctx1 & ctx2 & ~ctx3  = 0x04 = 00000100
u7 = ~ctx1 & ~ctx2 & ctx3  = 0x02 = 00000010
u8 = ~ctx1 & ~ctx2 & ~ctx3 = 0x01 = 00000001

Now we can construct any phenotype by combining the appropriate unit bit strings with |.

The above shows how the phenotype can be constructed by applying standard logic operations
applied to the standard context.  In other words, it shows how a genotype can be constructed to
map to any phenotype.

Example n = 2.  Let the phenotype ph be 0xa = 1010.
Then ph = u1 | u3  because ph has one bits in positions 1 and 3.

Example n = 3.  Let the phenotype ph be 0x92 = 10010010.
ph = u1 | u4 | u7  because ph has one bits in positions 1, 4, and 7.

While these examples are for 2 and 3 inputs, clearly they generalize to any number of inputs.
I should write this up as a proof for any number of inputs.

Since there is a genotype for every phenotype, Kolmogorov complexity is always defined.
(We did not know this.  We only knew that we found that epochal evolution always worked.)
The above construction puts an upper bound on the K complexity of any phenotype.
This upper bound might be able to be tweaked to sometimes give a better upper bound than
we previously found by running simulations.
