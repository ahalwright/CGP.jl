See the Windows file cce/'Environmental robustness proposal 7_17_20.docx' for the latest proposal.

The objective will to measure fitness of a chromosome output in terms of the total Hamming
distance of the output components to the goal components.  Currently, function match_score() in 
Evolve.jl returns score of the best-scoring match between components of output and components of goal.
A match between the components of outputs and the components of goal is permutation p of 1:nc
where ouput[i] is matched to goal[p[i]] and nc is the number of components of the output and of the 
goal.  Match_score is the number of exact component matches plus the score of the best partial 
component match.  The score of of a partial match between component x and component y is 
1.0 - hamming(x,y)/2^numinputs.  (From the comments before match_score().)

The alternative is to find the permutation p of 1:nc which minimizes the total Hamming distance
of the match.  As in function match_score(), let
H = [ hamming_distance(output[i],goal[j],numinputs) for i = 1:nc, j=1:nc].  This is the 2-D matrix
of of Hamming distances between output components and goal components.  The problem of finding
the minimum total permutation is a balanced assignment problem.  In other words, the problem
is finding a permutation p of collect(1:nc) so that sum_i( H(i,p(i)) is mimimized.  The code for
match_score() already generates all permutations of collect(1:nc), so this should be a small modification.
