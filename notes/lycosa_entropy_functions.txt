  [wright@lycosa src]$ fgrep function entropy.jl
  9:function dist_check( p::DIST_TYPE )
  22:function pop_to_dist( pop::IPopulation )
  34:function pop_to_dist( pop::FPopulation )
  46:function pop_to_dist( pop::MIPopulation )
  58:function pop_to_dist( pop::SPopulation )
  73:function pops_to_dist( P1::IPopulation, P2::IPopulation )
  88:function pops_to_dist( P1::MIPopulation, P2::MIPopulation )
  103:function pops_to_dist_bs( P1::FPopulation, P2::FPopulation )
  122:function pops_to_tbl( P::Vector{Population} )
  144:function pops_to_tbl( P::Vector{IPopulation} )
  148:function pops_to_tbl( P::Vector{MIPopulation} )
  152:function pops_to_tbl( P::Vector{SPopulation} )
  157:function pops_to_tbl( P::Tuple )
  179:function pops_to_tbl( P::Vector{FPopulation} )
  199:function pop_counts_to_tbl( D::DataFrame, columns::Vector{Int64}=collect(1:(div(size(D)[2],2))))
  230:function table_row_to_dist( tbl::Array{Float64,2}, row_index::Int64 )
  240:function row_marginal( tbl::Array{Float64,2} )
  244:function column_marginal( tbl::Array{Float64,2} )
  248:function entropy( p::DIST_TYPE; base::Float64=2.0 )
  259:function entropy( p::IPopulation; base::Float64=2.0 )
  263:function entropy( p::MIPopulation; base::Float64=2.0 )
  268:function entropy( p::SPopulation; base::Float64=2.0 )
  275:function entropy( p::Vector{Float64}; base::Float64=2.0 )
  281:function entropy( tbl::Array{Float64,2}, row_index::Int64; base::Float64=2.0 )
  290:function relative_entropy( p::DIST_TYPE, q::DIST_TYPE; base::Float64=2.0 )
  305:function relative_entropy( q::IPopulation, p::IPopulation; base::Float64=2.0 )
  309:function relative_entropy( q::SPopulation, p::SPopulation; base::Float64=2.0 )
  313:function relative_entropy( p::Vector{Float64}, q::Vector{Float64}; base::Float64=2.0 )
  329:function conditional_entropy( tbl::Array{Float64,2}, rows::Vector{Int64}=collect(1:size(tbl)[1]); base::Float64=2.0 )
  346:function joint_entropy( tbl::Array{Float64,2}; base::Float64=2.0 )
  361:function joint_entropy( P1::MIPopulation, P2::MIPopulation; base::Float64=2.0 )
  369:function joint_entropy( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  377:function joint_entropy_bs( P1::FPopulation, P2::FPopulation; base::Float64=2.0 )
  385:function mutual_information( P1::MIPopulation, P2::MIPopulation; base::Float64=2.0 )
  393:function mutual_information( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  402:function mutual_information_bs( P1::Vector{Float64}, P2::Vector{Float64}; base::Float64=2.0 )
  410:function mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  427:function sherwin_mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  441:function sherwin_mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  454:function mutual_information( D::DataFrame, columns::Vector{Int64}=collect(1:(div(size(D)[2],2))); base::Float64=2.0 )
  458:function mutual_information( P::Vector{FPopulation}; base::Float64=2.0 )
  462:function mutual_information( P1::FPopulation, P2::FPopulation; base::Float64=2.0 )
  467:function mutual_information( P::Vector{IPopulation}; base::Float64=2.0 )
  471:function mutual_information( P::Vector{MIPopulation}; base::Float64=2.0 )
  475:function mutual_information( P::Vector{SPopulation}; base::Float64=2.0 )
