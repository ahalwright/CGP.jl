Worked on Fnc.jl.  How to integrate random_walk() and random_walk_mutate_all() into the statistics about NCs.

p = Parameters(2,1,3,2)
funcs = default_funcs(p.numinputs)
c=rand_lcircuit(p,funcs); rand_evo_walk(c,20,120)
c=rand_lcircuit(p,funcs); rand_evo_walk_mutate_all(c,20,4)
c=random_chromosome(p,funcs); rand_evo_walk(c,20,120)
c=random_chromosome(p,funcs);  rand_evo_walk_mutate_all(c,20,4)

julia> print_circuit(sch)
circuit((1,2), ((3,AND,2,2), (4,AND,3,3), (5,OR,4,4)))

julia> slc.circuit_vects
3-element Vector{Vector{UInt16}}:
 [0x0001, 0x0002, 0x0004, 0x0003]
 [0x0001, 0x0002, 0x0004, 0x0004]
 [0x0002, 0x0001, 0x0001, 0x0004]

julia> (output_values(slc,funcs),output_values(sch)) 
(UInt16[0x000a], UInt16[0x000a])

julia> lc = deepcopy(slc); rand_evo_walk(lc,20,120)
phenotype: UInt16[0x000a]
count_mutations: 2400  length(returned_genotypes): 235
235 

julia> lc = deepcopy(slc); rand_evo_walk_mutate_all(lc,20,4)[end]
phenotype: UInt16[0x000a]
count_mutations: 2400
40.0 

julia> ch = deepcopy(sch); rand_evo_walk(ch,20,120)
phenotype: UInt16[0x000a]
count_mutations: 2400  length(returned_genotypes): 237
237

julia> ch = deepcopy(sch); rand_evo_walk_mutate_all(ch,20,4)[end]
phenotype: UInt16[0x000a]
count_mutations: 1200
36.0

Tentative conclusion:  rand_evo_walk() works much better than rand_evo_walk_mutate_all()
TODO:  further test and debug, especially of rand_evo_walk_mutate_all()
