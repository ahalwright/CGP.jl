Found a bug in mutate_chromosome!() and mutate_all().
There is a bias in that some mutations happen more than others which is illustrated by the following:
However, the bias is not large.
p = Parameters(4,1,8,5)
funcs=default_funcs(p.numinputs) # 1-element Array{Func,1}: Func(Main.CGP.Nand, 2, "NAND")
c = random_chromosome(p,funcs); print_circuit(c)
chroms = mutate_all(deepcopy(c),funcs,output_outputs=false, output_chromosomes=true); length(chroms) # 62
mch = [ mutate_chromosome!(deepcopy(c),funcs)[1] for _=1:100000];
mcints = map(circuit_int,mch); length(unique(mcints)) # 62
dd = Dict{Int128,Int}()
for mci in mcints dd[mci] = 1 + get(dd,mci,0) end
ddl = [ dd[k] for k in keys(dd)];
(minimum(ddl),maximum(ddl))   # (1647, 2370)
# Repeat twice for 1000000 mutations rather than 100000
(minimum(ddl),maximum(ddl))   # (15395, 21169)
(minimum(ddl),maximum(ddl))   # (15262, 21059)

Repeating for the Raman gate set:
(minimum(ddl),maximum(ddl))   # (10161, 14027)

The above also demonstrates that circuit_int() returns unique integers 

