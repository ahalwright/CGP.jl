Proposed an epistais hypothesis:  see complexity/cce/'Epistasis hypothesis 9_4_20.docx'.

Implemented a version that is not really epistasis because of the 0-1 rather than the real-valued output of a circuit.
See src/epistasis.jl.  
TODO:  Implement a Walsh transform version.

This version comes up with an "epistasis" for each order from numiputs down to 2. 

# Consolidate 100 instance versions of the 3x1 results for Macia (NAND) gate set and Raman (AND, OR, XOR, NAND, NOR) gate set.
juiia> consolidate_dataframe("../data/9_4/geno_pheno_macia_3x1_100inst9_4B.csv","../data/consolidate/geno_pheno_3x1_raman9_4cons.csv",consolidate=true)
julia> consolidate_dataframe("../data/9_4/geno_pheno_raman_3x1_100inst9_4D.csv","../data/consolidate/geno_pheno_3x1_raman9_4cons.csv",consolidate=true);

julia> dfm3 = read_dataframe("../data/consolidate/geno_pheno_3x1_macia9_4cons.csv");
julia> numinputs=3
julia> order=2
julia> dfm3.epi2 = map( x->epistasis( x, order, numinputs ), dfm3[:,1] );  # column 1 of dfm3 is :goal
julia> order=3
julia> dfm3.epi3 = map( x->epistasis( x, order, numinputs ), dfm3[:,1] );
julia> [spearman_cor(dfm3,:logsteps, e) for e in [:epi2, :epi3]]
2-element Array{Tuple{Float64,Float64},1}:
 (0.29962370272976185, 5.219757902359364e-7)   # Spearman correlation between :logsteps and :epi2, p-value
 (0.1793273980988741, 0.0019974266834743228)   # Spearman correlation between :logsteps and :epi2, p-value
julia> [spearman_cor(dfm3,:complex, e) for e in [:epi2, :epi3]]
2-element Array{Tuple{Float64,Float64},1}:
 (0.25702122841917097, 1.5749300975939624e-5)
 (0.22623288740415165, 0.00013140626392350182)

julia> dfr3 = read_dataframe("../data/consolidate/geno_pheno_3x1_raman9_4cons.csv");
julia> numinputs=3
julia> order=2  
julia> dfr3.epi2 = map( x->epistasis( x, order, numinputs ), dfr3[:,1] );  # column 1 of dfr3 is :goal 
julia> order=3 
julia> dfr3.epi3 = map( x->epistasis( x, order, numinputs ), dfr3[:,1] ); 
julia> [spearman_cor(dfr3,:logsteps, e) for e in [:epi2, :epi3]]
2-element Array{Tuple{Float64,Float64},1}:
 (0.22209285070206153, 0.00017119309151809547)
 (0.1749860937629668, 0.002494278470705698)
julia> [spearman_cor(dfr3,:complex, e) for e in [:epi2, :epi3]]
2-element Array{Tuple{Float64,Float64},1}:
 (0.37762334894267074, 2.1168131212941866e-10)
 (0.2961788187156411, 7.023108550464981e-7)

julia> dfr4 = read_dataframe("../data/consolidate/geno_pheno_4x1_raman8_31cons.csv");
julia> numinputs=4
julia> order=2
julia> dfr4.epi2 = map( x->epistasis( x, order, numinputs ), dfr4[:,1] );  
julia> order=3
julia> dfr4.epi3 = map( x->epistasis( x, order, numinputs ), dfr4[:,1] );  
julia> order=4
julia> dfr4.epi4 = map( x->epistasis( x, order, numinputs ), dfr4[:,1] );
julia> [spearman_cor(dfr4,:logsteps, e) for e in [:epi2, :epi3, :epi4]]
3-element Array{Tuple{Float64,Float64},1}:
 (0.17176091694781834, 0.0)
 (0.18267182175190133, 0.0)
 (0.1280033671665453, 9.739026794869275e-238)
julia> [spearman_cor(dfr4,:complex, e) for e in [:epi2, :epi3, :epi4]]
3-element Array{Tuple{Float64,Float64},1}:
 (0.2217150178685778, 0.0)
 (0.25843853191190846, 0.0)
 (0.18542638478139736, 0.0)

