Trying to understand the integration version of complexit (complexity7).
See the file test/test_complexity.jl
See the document complexity/cce/Interpretation_complexity9_28.docx.

# Shows all integration values for lists of 3 four-bit outputs.  
# Reduced to the first half of each range because they are all symmetric
#
julia> [[[ round(integration([z,x,y],2),digits=2) for y = 0x0:0x7 ] for x = 0x0:0x7 ] for z = 0x0:0x7]
8-element Array{Array{Array{Float64,1},1},1}:
 [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.81, 0.12, 0.31, 0.12, 0.31, 0.31, 0.12], [0.0, 0.12, 0.81, 0.31, 0.12, 0.31, 0.31, 0.12], [0.0, 0.31, 0.31, 1.0, 0.31, 0.0, 0.0, 0.31], [0.0, 0.12, 0.12, 0.31, 0.81, 0.31, 0.31, 0.12], [0.0, 0.31, 0.31, 0.0, 0.31, 1.0, 0.0, 0.31], [0.0, 0.31, 0.31, 0.0, 0.31, 0.0, 1.0, 0.31], [0.0, 0.12, 0.12, 0.31, 0.12, 0.31, 0.31, 0.81]]
 [[0.0, 0.81, 0.12, 0.31, 0.12, 0.31, 0.31, 0.12], [0.81, 1.62, 0.93, 1.12, 0.93, 1.12, 1.12, 0.93], [0.12, 0.93, 0.93, 1.12, 0.43, 0.62, 0.62, 0.43], [0.31, 1.12, 1.12, 1.31, 0.62, 0.81, 0.81, 0.62], [0.12, 0.93, 0.43, 0.62, 0.93, 1.12, 0.62, 0.43], [0.31, 1.12, 0.62, 0.81, 1.12, 1.31, 0.81, 0.62], [0.31, 1.12, 0.62, 0.81, 0.62, 0.81, 1.31, 1.12], [0.12, 0.93, 0.43, 0.62, 0.43, 0.62, 1.12, 0.93]]
 [[0.0, 0.12, 0.81, 0.31, 0.12, 0.31, 0.31, 0.12], [0.12, 0.93, 0.93, 1.12, 0.43, 0.62, 0.62, 0.43], [0.81, 0.93, 1.62, 1.12, 0.93, 1.12, 1.12, 0.93], [0.31, 1.12, 1.12, 1.31, 0.62, 0.81, 0.81, 0.62], [0.12, 0.43, 0.93, 0.62, 0.93, 0.62, 1.12, 0.43], [0.31, 0.62, 1.12, 0.81, 0.62, 1.31, 0.81, 1.12], [0.31, 0.62, 1.12, 0.81, 1.12, 0.81, 1.31, 0.62], [0.12, 0.43, 0.93, 0.62, 0.43, 1.12, 0.62, 0.93]]
 [[0.0, 0.31, 0.31, 1.0, 0.31, 0.0, 0.0, 0.31], [0.31, 1.12, 1.12, 1.31, 0.62, 0.81, 0.81, 0.62], [0.31, 1.12, 1.12, 1.31, 0.62, 0.81, 0.81, 0.62], [1.0, 1.31, 1.31, 2.0, 1.31, 1.0, 1.0, 1.31], [0.31, 0.62, 0.62, 1.31, 1.12, 0.81, 0.81, 1.12], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.31, 0.62, 0.62, 1.31, 1.12, 0.81, 0.81, 1.12]]
 [[0.0, 0.12, 0.12, 0.31, 0.81, 0.31, 0.31, 0.12], [0.12, 0.93, 0.43, 0.62, 0.93, 1.12, 0.62, 0.43], [0.12, 0.43, 0.93, 0.62, 0.93, 0.62, 1.12, 0.43], [0.31, 0.62, 0.62, 1.31, 1.12, 0.81, 0.81, 1.12], [0.81, 0.93, 0.93, 1.12, 1.62, 1.12, 1.12, 0.93], [0.31, 1.12, 0.62, 0.81, 1.12, 1.31, 0.81, 0.62], [0.31, 0.62, 1.12, 0.81, 1.12, 0.81, 1.31, 0.62], [0.12, 0.43, 0.43, 1.12, 0.93, 0.62, 0.62, 0.93]]
 [[0.0, 0.31, 0.31, 0.0, 0.31, 1.0, 0.0, 0.31], [0.31, 1.12, 0.62, 0.81, 1.12, 1.31, 0.81, 0.62], [0.31, 0.62, 1.12, 0.81, 0.62, 1.31, 0.81, 1.12], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.31, 1.12, 0.62, 0.81, 1.12, 1.31, 0.81, 0.62], [1.0, 1.31, 1.31, 1.0, 1.31, 2.0, 1.0, 1.31], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.31, 0.62, 1.12, 0.81, 0.62, 1.31, 0.81, 1.12]]
 [[0.0, 0.31, 0.31, 0.0, 0.31, 0.0, 1.0, 0.31], [0.31, 1.12, 0.62, 0.81, 0.62, 0.81, 1.31, 1.12], [0.31, 0.62, 1.12, 0.81, 1.12, 0.81, 1.31, 0.62], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.31, 0.62, 1.12, 0.81, 1.12, 0.81, 1.31, 0.62], [0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [1.0, 1.31, 1.31, 1.0, 1.31, 1.0, 2.0, 1.31], [0.31, 1.12, 0.62, 0.81, 0.62, 0.81, 1.31, 1.12]]
 [[0.0, 0.12, 0.12, 0.31, 0.12, 0.31, 0.31, 0.81], [0.12, 0.93, 0.43, 0.62, 0.43, 0.62, 1.12, 0.93], [0.12, 0.43, 0.93, 0.62, 0.43, 1.12, 0.62, 0.93], [0.31, 0.62, 0.62, 1.31, 1.12, 0.81, 0.81, 1.12], [0.12, 0.43, 0.43, 1.12, 0.93, 0.62, 0.62, 0.93], [0.31, 0.62, 1.12, 0.81, 0.62, 1.31, 0.81, 1.12], [0.31, 1.12, 0.62, 0.81, 0.62, 0.81, 1.31, 1.12], [0.81, 0.93, 0.93, 1.12, 0.93, 1.12, 1.12, 1.62]] 

Note that there is only one 2.0 value in all 196 of these values.
julia> get_bits([0x5,0x5,0x5],2)
4-element Array{UInt8,1}:
 0x07
 0x00
 0x07
 0x00

julia> integration0([0x5,0x5,0x5],2)
X: UInt8[0x05, 0x05, 0x05]  entX: 1.0
gb_list: Array{UInt8,1}[[0x01, 0x00, 0x01, 0x00], [0x01, 0x00, 0x01, 0x00], [0x01, 0x00, 0x01, 0x00]]  ent_list: [1.0, 1.0, 1.0]  sum: 3.0
2.0 

julia> [[[ round(integration([z,x,y],2)+entropy(get_bits([z,x,y],2)),digits=2) for y = 0x0:0x7 ] for x = 0x0:0x7 ] for z = 0x0:0x7] 
8-element Array{Array{Array{Float64,1},1},1}:
 [[0.0, 0.81, 0.81, 1.0, 0.81, 1.0, 1.0, 0.81], [0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62]]
 [[0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43]]
 [[0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43]]
 [[1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62]]
 [[0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43]]
 [[1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62]]
 [[1.0, 1.81, 1.81, 2.0, 1.81, 2.0, 2.0, 1.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [2.0, 2.81, 2.81, 3.0, 2.81, 3.0, 3.0, 2.81], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62]]
 [[0.81, 1.62, 1.62, 1.81, 1.62, 1.81, 1.81, 1.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.81, 2.62, 2.62, 2.81, 2.62, 2.81, 2.81, 2.62], [1.62, 2.43, 2.43, 2.62, 2.43, 2.62, 2.62, 2.43]]

julia> fract_part(x) = round(x-trunc(x),digits=2)

julia> [[[ fract_part(integration([z,x,y],2)+entropy(get_bits([z,x,y],2))) for y = 0x0:0x7 ] for x = 0x0:0x7 ] for z = 0x0:0x7]
8-element Array{Array{Array{Float64,1},1},1}:
 [[0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62]]
 [[0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43]]
 [[0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43]]
 [[0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62]]
 [[0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43]]
 [[0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62]]
 [[0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.0, 0.81, 0.81, 0.0, 0.81, 0.0, 0.0, 0.81], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62]]
 [[0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.81, 0.62, 0.62, 0.81, 0.62, 0.81, 0.81, 0.62], [0.62, 0.43, 0.43, 0.62, 0.43, 0.62, 0.62, 0.43]]

Note:  only values of 0.0, 0.43, 0.62, 0.81 

[([z,x,y], get_bits([z,x,y],2),[entropy(get_bits([p],2)) for p in [z,y,x]],(fract_part(integration([z,x,y],2)+entropy(get_bits([z,x,y],2))))) for y = 0x0:0x7  for x = 0x0:0x7  for z = 0x0:0x7]
512-element Array{Tuple{Array{UInt8,1},Array{UInt8,1},Array{Float64,1},Float64},1}:

#Shows that truncated value 0.62 is 2*0.81,  0.43 is 3*0.81
#   since entropy(get_bits([p],2))  when p in [z,x,y] is one of the values 2.0, 1.5, 1.0, 0.81, 0.0.
# See the document complexity/cce/Interpretation_complexity9_28.docx.

# More information
julia> [([z,x,y], get_bits([z,x,y],2),[entropy(get_bits([p],2)) for p in [z,y,x]],(fract_part(integration([z,x,y],2)+entropy(get_bits([z,x,y],2))))) for y = 0x0:0x7  for x = 0x0:0x7  for z = 0x0:0x7]
512-element Array{Tuple{Array{UInt8,1},Array{UInt8,1},Array{Float64,1},Float64},1}:
