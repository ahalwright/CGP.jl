4/29/20

Investigate the computation of mutual information using the pops_to_to_dist method and the pops_to_tbl method.

Assume two MIPopulations P1 and P2.

=======================
pops_to_dist method:

mutual_information(P1,P2)

# Mutual information by the defintion   I(P1;P2) = H(P1) + H(P2) - H(P1,P2) (eq. 2.45 of Cover)
function mutual_information( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  entropy(P1,base=base) + entropy(P2,base=base) - joint_entropy(P1,P2,base=base)
end

# There is one entry in the table for each pair (P1[i],P2[j]).
function joint_entropy( P1::MIPopulation, P2::MIPopulation; base::Float64=2.0 )
  entropy(pops_to_dist(P1,P2),base=base)
end

Thus, joint_entropy(P1,P2) is reduced and mutual_information is increased for each duplication of 
pairs (P1[i],P2[i]),


# Assumes that both populations are indexed over the same set.
# Thus, both population must be the same length
# There is one entry in the dictionary for each pair (P1[i],P2[i]).
function pops_to_dist( P1::MIPopulation, P2::MIPopulation )
  len1 = length(P1)
  len2 = length(P2)
  @assert( len1 == len2 )
  result = DIST_TYPE()
  for i = 1:len1
    entry = (P1[i],P2[i])
    result[entry] = get(result,entry,0.0) + 1.0/len1
  end
  result
end           

=======================
pops_to_tbl method:

mutual_information([P1,P2])

function mutual_information( P::Vector{MIPopulation}; base::Float64=2.0 )
  sherwin_mutual_information( pops_to_tbl( P ), base=base )
end 

# tbl is the probability distribution for a total population which is made up of m subpopulations
#    all over the same allele set of size n.
# Row i of tbl corresponds to a probability distribution over subpopulation i.
function sherwin_mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  entf(x) = x != 0 ? -x*log(base,x) : 0.0
  (m,n) = size(tbl)
  # weight[i] is the fraction of the total population corresponding to subpopulation i.
  weights = [ sum(tbl[i,:]) for i = 1:m ]
  s = [ sum( map(entf,tbl[i,:]/weights[i])) for i = 1:m ]
  ent_total = sum(map(entf,[sum(tbl[:,j]) for j = 1:n]))
  ent = ent_total - sum(s[i]*weights[i] for i = 1:m)
  #println(" -- sh ent: ",ent)
  ent
end

Analysis:
m = #rows,  n = #columns
weights == 1/m     when tbl is computed by pops_to_tbl() below
s is the vector of entropies of the rows normalized to have sum 1

# There is one column per "allele" of the combined population
# An "allele" is value of an element of the population.
# The sum of the entries in the result is 1.0.
# The sum of the entries in row i is length(P[i])/(sum(length(p) for p in P)
# Note that mutual_information(pops_to_tbl([P1,P2)) does not give the same result
# as mutual_informaiton(P1,P2) which is computed using pops_to_dist(P1,P2).
# The latter result should be the correct result.
function pops_to_tbl( P::Vector{Population} )
  #P = map(x->convert(Vector{Any},x),P)
  m = length(P)   # the number of rows in result
  combined_pop = reduce(vcat, P[i] for i = 1:m )
  N = length(combined_pop)
  allele_list = unique(combined_pop)
  n = length(allele_list)   # The number columns in result
  result = zeros(Float64,m,n)
  for i = 1:length(P)
    dist = Dict( allele_list .=> zeros(Float64,n))
    for p in P[i]
      dist[p] += 1.0/N
    end
    result[i,:] = [ dist[a] for a in allele_list ]
  end
  result
end           

==========================a
Example:

julia> (P1,P1a,P2)
([UInt8[0x00, 0x01, 0x02, 0x02], UInt8[0x02, 0x02, 0x00, 0x01], [UInt8[0x02, 0x02, 0x04, 0x05])

julia> pops_to_dist(P1,P2)
Dict{Any,Any} with 4 entries:
  (0x02, 0x05) => 0.25
  (0x01, 0x02) => 0.25
  (0x02, 0x04) => 0.25
  (0x00, 0x02) => 0.25

a> pops_to_dist(P1a,P2)
Dict{Any,Any} with 3 entries:
  (0x02, 0x02) => 0.5
  (0x00, 0x04) => 0.25
  (0x01, 0x05) => 0.25

julia> (mutual_information(P1,P2),mutual_information(P1a,P2))
(1.0, 1.5)

Order of the elements of P1 and P2 does make a difference for the pops_to_dist method.

juliaa> pops_to_tbl([P1,P2])
2×5 Array{Float64,2}:
 0.125  0.125  0.25  0.0    0.0
 0.0    0.0    0.25  0.125  0.125

julia> pops_to_tbl([P1a,P2])
2×5 Array{Float64,2}:
 0.25  0.125  0.125  0.0    0.0
 0.25  0.0    0.0    0.125  0.125

julia> mutual_information([P1,P2])
0.5

julia> mutual_information([P1a,P2])
0.5

Order of the elements of P1 and P2 does not make a difference for the pops_to_tbl method.

