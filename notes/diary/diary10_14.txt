Plan for parallelizing geno_complexity() in Evolvability.jl:

geno_complexity() will return the list all_unique_outputs.
It will continue to run for multiple reps.
run_geno_complexity() will use unique() to combine subsequent results from geno_complexity().
So now run_geno_complexity() will run efficiently parallelized.

Also changed run_geno_complexity() to take parameters as an argument.

On surt2:
julia> include("../data/10_14/run_geno_complexityB.jl")
julia> cgdf = add_frequencies_to_dataframe( gdf, :ints11_5 )
julia> write_dataframe_with_comments(cgdf,"../data/10_14/geno_complexity10_14C.csv","../data/10_14/geno_complexity10_14Ccounts.csv")

julia> gcdf.log(nchoms) = map(x-log10(x), gcdf.nchromes )    # I can't find exactly where this was done, but I don't use this column

julia> gcdf = read_dataframe("geno_complexity10_14Ccounts_logs.csv")
julia> y = zeros(20,12)
20×12 Array{Float64,2}:
julia> gcdf = sort(gcdf,[:counts,:nchromes])
240×16 DataFrame
ulia> for i = 0:11
         y[:,i+1] = gcdf.evo_count[(20*i+1):(20*i+20)]
       end
julia> lbls=[@sprintf("%d",gcdf.counts[i]) for i=1:20:221]
12-element Array{String,1}:
julia> rlbls=reshape(lbls,(1,12))  # 1 row
1×12 Array{String,2}:
 "24"  "46"  "56"  "59"  "77"  "98"  "251"  "343"  "390"  "2389"  "2904"  "12142"
julia> plot(x,y,title="Evovable count vs number circuits", xlabel="n = number circuits", ylabel="Evolvable count",labels=rlbls)
julia> savefig("evo_count_vs_num_circuits,png")



