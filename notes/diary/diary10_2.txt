On surt2
julia> p = Parameters( numinputs=3, numoutputs=1, numinteriors=7,numlevelsback=3)
julia> bag =build_all_genes( p, incr=2 )
julia> ol = outputs_list( p, bag, funcs, 10000, incr=2 )
julia> og = [oll[2][1] for oll in ol]
82012500-element Array{UInt16,1}:
 0xff55
julia> unique(og)
224-element Array{UInt16,1}:
output file:  data/10_2/out_listA.csv.bz2
Comment:  did not work:  Goals are not in correct format.  Maybe overflow.

Added 10/6:
Tried the following check:
julia> p = Parameters( numinputs=3, numoutputs=1, numinteriors=7, numlevelsback = 2 )
Parameters(1, 4, 0.05, 0.0, 3, 1, 2, 7, 2)
julia> funcs = default_funcs(p.numinputs)
1-element Array{Func,1}:
 Func(Main.CGP.Nand, 2, "NAND")
julia> gg=integer_to_genes( p, 59049 )
14-element Array{Int64,1}:
 1
 0
 0
 1
 1
 0
 1
 0
 1
 0
 1
 0
 0
 1
julia> cc = build_chromosome(p,gg,funcs,incr=2)
julia> outputs = output_values(cc)
1-element Array{UInt32,1}:
 0x00000077

According the a record in  out_listA.csv, should have come out to be 0xe6a9.
So something didn't work.

Second run:
julia> p = Parameters( numinputs=3, numoutputs=1, numinteriors=8,numlevelsback=3)
Parameters(1, 4, 0.05, 0.0, 3, 1, 2, 8, 3)
julia> bag =build_all_genes( p, incr=1 ); 
# Time:  about 5 hours 
max_gene: [2, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2]
julia> @time ol = outputs_list( p, bag, funcs, 100000, incr=1 )
Comment:  did not work because many goals were 16 bits rather than 8 bits
So saving the buid_all_goals file:
julia> open( "../data/10_2/build_all_goals.txt","w") do f
         print_parameters(f,p,comment=true)
         println(f,"# incr: ",incr)
         for i = 1:10
           println(f,bag[i])
         end
       end

===========================================================================================
Generating Raman 4x1 counts for 11 ints:




===========================================================================================
Plotting frequencies:

julia> pwd()
"C:\\Users\\oldmtnbiker\\Dropbox\\evotech\\complexity\\data\\9_21"
julia> using Plots  
julia> fdf = read_dataframe("frequencies4x1.csv") 
julia> fmat = zeros(14512,3); 
julia> fmat[1:14228,1] = fdf.freq8[1:14228]
julia> fmat[1:14228,1] = fdf.freq8[1:14228]
julia> fmat[1:14509,3] = fdf.freq10[1:14509]
julia> plot( xlog, fmat ) 
julia> savefig("../../cce/plots/frequencies10_2.png")

# Better plots
# on lycosa
julia> rc = read_counts_files( "count_out_4x1_8ints_10_10dec.csv", "count_out_4x1_9ints_10_10dec.csv", "count_out_4x1_10ints_10_10dec.csv")
julia> df = DataFrame()
julia> df.goals = rc[1]
julia> df.ints8 = rc[2][1]
julia> df.ints9 = rc[2][2];
julia> df.int10 = rc[2][3];
julia> write_dataframe(df, "count_out_4x1_all_ints_10_10dec.csv" )
julia> s9df = sort( df, :ints9, rev=true )   # sorts dataframe on column :ints9.
julia> write_dataframe(s9df, "count_out_4x1_all_ints_10_10sort9.csv" )
# download file to windows
# on Windows
julia> s9logs = zeros(65536,3)
julia> s9logs[:,1] = map(x->(x > 0.0 ? log10(x) : 0.0), s9df.ints8 ) 
julia> s9logs[:,2] = map(x->(x > 0.0 ? log10(x) : 0.0), s9df.ints9 ) 
julia> s9logs[:,3] = map(x->(x > 0.0 ? log10(x) : 0.0), s9df.ints10 ) 
julia> plot( collect(1:65536), s9logs[:,[1,3] )     # data overlaps so only show 2 columns
