I implemented Frenken (or more accurately Theil) mutual information as fmutual_information() in test/frenken_stats.jl.
# The information statistics used in the paper "FRENKEN, K. and NUVOLARI, A., 2004.
# 'The early development of the steam engine: an evolutionary interpretation using complexity theory.'
#  Industrial and Corporate Change, 13(2), pp. 419-450."

Frenken mutual information applies to a vector of MyInts.
Tested whether fmutual_information and complexity5 correlate.

Test whether fmutual_information and complexity5 correlate when applied to random MyInt vectors:
julia> test_correlation( 1000, fmutual_information, complexity5, 4, 10 )
0.04251275950194341
Conclusion:  no correlation

Test whether fmutual_information and complexity5 correlate when applied to get_bits(x,numinputs):
julia> test_correlation( 1000, gb_fmi, gb_complexity, 3, 2^3 )
-0.005179145505078972
Conclusion:  no correlation

Test whether fmutual_information(x,ni) and complexity5(get_bits(x,ni),ni) are correlated when x is chosen to have
  the the same length as the output of get_bits
test_correlation( 100, fmutual_information, gb_complexity,4,2^4)
0.8155645965373286

repeat_cor( nreps, numinputs ) =
  [ test_correlation( 100, fmutual_information, gb_complexity,numinputs,2^numinputs ) for _=1:nreps ]

julia> repeat_cor( 5, 3 )
5-element Array{Float64,1}:
 0.8562247654337158
 0.8050611768206124
 0.7703783987630812
 0.7515389409360808
 0.840172480696808

julia> repeat_cor( 10, 4 )
10-element Array{Float64,1}:
 0.8757085474976382
 0.765284603129575
 0.8213861663255815
 0.8266700596598032
 0.7895428066013249
 0.7626824392301742
 0.7653089079205779
 0.8663688664681711
 0.8214478049295185
 0.7232260678288307
Conclusion:  A strong and consistent correlation.

Test how much faster fmutual_information() is than complexiity5(get_bits())
julia> @time for _=1:100 fmutual_information( randgoal( numinputs, 2^numinputs ), numinputs ) end
  0.007131 seconds (70.42 k allocations: 1.293 MiB)

julia> @time for _=1:100 complexity5( get_bits(randgoal( numinputs, 2^numinputs ), numinputs),numinputs) end
 33.160042 seconds (593.17 M allocations: 22.198 GiB, 4.15% gc time)

julia> @time for _=1:100 gb_complexity(randgoal( numinputs, 2^numinputs ), numinputs) end
 33.265931 seconds (592.22 M allocations: 22.176 GiB, 4.58% gc time)

Thus, fmutual_information() is much faster that gb_complexity().  Probably, fmutual_information is linear in numinputs
while gb_complsity is exponential.
