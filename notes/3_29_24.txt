Rewrote function neutral_component(circuit::Chromosome, funcs::Vector{Func}) as described below
The previous definition was incorrect.

p = Parameters(1, 4, 0.05, 0.0, 2, 1, 2, 3, 3)   # 5 funcs
ch = int_to_chromosome( 39403, p, funcs )
nc0 = neutral_component( ch, funcs )
 #  Set{Int128} with 4332 elements:

Algorithm:   neutral_component(circuit::Chromosome, funcs::Vector{Func})
ov = output_values(circuit)[1]
nc = Set([circuit]
stack = [circuit]
while length(stack) > 0
  circ = pop(stack)
  circs = filter(cch->ov==output_values(cch), mutate_all( circ, funcs, output_outputs=false, output_circuits=true ))
  for c in circs
    if !( c in circs )
      push!(nc,c)
      push!(stack,c)
    end
  end
  nc
end
    
Unfortunately, chromosomes are mutable, so we must use chromosome_ints instead
Let ch_int == chromosome_to_int
Let int_ch == int_to_chromosome

Algorithm:   neutral_component(circuit::Chromosome, funcs::Vector{Func})
ov = output_values(circuit)[1]
nc = Set([ch_int(circuit)]
stack = [ch_int(circuit)]
while length(stack) > 0
  circ = int_ch(pop(stack))
  circs = filter(cch->ov==output_values(cch), mutate_all( circ, funcs, output_outputs=false, output_circuits=true ))
  for c in circs
    if !( ch_int(c) in nc )
      push!(nc,ch_int(c))
      push!(stack,ch_int(c))
    end
  end
  nc
end

# Copied into Neutral_component.jl
# returns the set of chromosome_ints of the neutral component of ch
function neutral_component( ch::Chromosome, funcs::Vector{Func} )::Set
  p = ch.params
  ov = output_values(ch)[1]
  nc = Set([chromosome_to_int(ch,funcs)])
  stack = [chromosome_to_int(ch,funcs)]
  while length(stack) > 0
    circ = int_to_chromosome( pop!(stack), p, funcs )
    circs = filter(cch->ov==output_values(cch)[1], mutate_all( circ, funcs, output_outputs=false, output_circuits=true ))
    for c in circs
      if !( chromosome_to_int(c) in nc )
        push!(nc,chromosome_to_int(c,funcs))
        push!(stack,chromosome_to_int(c,funcs))
      end
    end
  end
  nc
end
    
  
