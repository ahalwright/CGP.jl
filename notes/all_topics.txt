All diary topics:

9/26:  outdated on effects of mutation on complexity.  Examples of get_bits(). Examples of high/low complexity: test_complexity()
9/27:  gb_complexity meaningless.
9/28:  Tried to understand integration version of complexity.
9/30:  build_all_genes()
10/2:  build_all_genes() didn't work 
         semi_log scatter plot of counts 
10/5:  Rewrote run_geno_robustness() and run_geno_complexity() in Evolvability.jl  Excel plots.
10/6:  run_geno_pheno_evolution() in Genotype_phenotype.jl computes genotypic robustnes and evolvability.
10/8:  Corrected geno_robust() and geno_complexity() in Evolvability.  Scatter plots complexity/evolvability/robustness.
10/9:  Evolvability, complexity, robustness plots for Macia gate set.  Count results for Macia gate set.
        Catalan 2018 claims:  rare phenotypes will not play a central role in evolution: 
          they are hard to find in a genotype space that is filled with abundant phenotypes [12,14,37]." 
10/11: Scatter plots of evolvability, robustness, complexity including some 4x2 results
        A redo of some counts file results to correct ints11_8 and ints11_5.
10/12: Wrote random_neutral_walk() and run_random_neutral_walk() in evovability.jl.  Bugs remain.
10/13: Fixed problem with runs of random_neutral_walk() and geno_complexity()
10/14: Parallelized geno_complexity() in Evolvability.jl
10/15: Evolvability running for 64000 steps for a common and a rare goal.
10/18: Determine bias as defined by Greenbury (2014).
        Goal freq vs goal rank.
10/19: Scatter plot of counts including 8_5, 11_5, 11_8.
10/20: Integrated estimates of phenotypic evolvability in run_geno_complexity() and geno_compexity() in Evolvability.jl.
        Have mostly abandoned this approach.
10/22: Smoothness of complexity landscape.  neighbor_complexity() in src/neighbor_complexity.jl
10/23: No results.  See 10/26
10/26: Objective:  Find the size of the components of the neutral network of a goal by joining components
        discovered on multiple neutral walks.  Very successful for 3x1 goals, some results for 4x1 8_5, failure for 11_8
       Also a run of count_outputs.
10/27: Part 1: relate complexity, frequency, steps or log_steps (difficulty of evolution) Scatter plots
        functions geno_complexity() in Evolvability.jl.  cce/Complexity_frequency_difficulty_evolution10_30.docx
        Include plots generated on 12/4 with a larger sample of goals.
       Part 2:  neutral_walk_complexity() in neutral_walk_connectivity.jl: distribution of complexities on a neutral walk.
10/30: Additional results for 10/27
10/31: Distribution of complexities for a list of goals
11/1:  Distribution of complexities for a list of goals (same as 10_31)
11/4:  Arrow of complexity
11/5:  Working on the document "Exploring complexity11_5.docx".
        Checking whether the values of cumm_unique_goals of over 500 in explore_complexity11_4D.csv are plausible.
11/7:  Idea for visualization of a random collection goals.  
       Redoing the counts file for the Raman 4x1 case.
11/10: Kolmogorov complexity (see 11/11 for details)
11/11: Kolmogorov complexity for a set of random goals and for all 2^16 4x1 goals (F files).
11/15: Compute evolvability for a common and rare goal by sampling 65536 circuits.
11/18: Generating plots of evolvability vs robustness with other parameter settings.
11_21: Plot of number of unique phenotypes in a cumulatively increasing sample size of 1-mutant neighbors of the given phenotype.
      Best current idea for explaining the negative relationship between evolvability and robustness:
      Plot of both genotype and phenotype evolvability vs. robustness.
11_22: Attempted to determine connectivity of neutral net of a goal g by finding a distance reducing path from chromosome c1.  
      Not very successful.
11_27:  Includes plot of evo_count for 3 goals and many steps.  Shows that evolvability of common goals eventually catches up with
           evolvability of rare goals.
11_28:  sampling.jl  tests my hypothesis on sampling black, white, blue balls.
11_29:  tests whether increasing gates will effect evolvability vs robustness relationship.
12_1:   New version of neutral_walk_connectivity.jl.  Determining components by intersection neutral walks.
12_4:   Generated 10 plots for all combinations of evo_count, robustness, complexity, frequency, difficulty of evolution  
        See 10_27 for these new plots.
        Rerunnng determining evolvability by repeated sampling for a large number of goals including new goal [0x6b18]
12_6:
12_7:  Evolvability count plot for three 3x1 goals and large number of samples
12_9:  Connected components.  neutral_walk_connectivity. run_neutral_walk().
12_15: Worked on paper.  Shape space covering property, Kashtan.
12_16: Unable to replicate Kashtan results.
12_17: examples.jl to produce examples showing the relationships between robust, cmplx, freq, evo_count, logsteps
12_18: Density of complexities. Code in Genotype_phenotype.jl run_geno_pheno_evolution().
       Code also in RecordOutputs.jl  run_circuit_complexities().  Modified on 2/2/21
12_20: Some large circuit complexity files are in OneDrive/evotech/data/12_20 and 12_18.
12_21: Evolve.jl neutral_evolution() is a simplified version of mut_evolve() for 1 output.
       geno_circuits(), geno_properties(), geno_list_properties() compute robust, cmplx,
       geno_evo_evol, pheno_evo_evol, evo_steps for a list of goals.  More runs on 12/24.
12_22: mutational_evolvability.jl mutational_evolvability().  
       Compute unique phenotypes in neighborhoods of increasing size of starting circuit.
12_24: Start to replicate Hu (2020) results.
12_26: Discussion of implications of Hu (2020) for our results.
12_27: random_walk.jl run_random_walks_parallele().  Duplicate Hu (2020) results.
12_29: Testing hypothesis that complexities of phenotypes by evolution is greater than complexities by sampling.
        Using circuit_complexities as in 12_18 and 10_27 results.  Strongly significant.
12_30: Found and corrected a bug in mutate_chromosome!() and mutate_all().  Bias is not large.
        Also demonstrates that circuit_int() returns unique integers.
12_31: Parallelized robust_evolvability() in random_walk.jl.  Degree of parallelism to high.
1_1:   Found a major bug in run_walks_parallel() in random_walk.jl.
        union() was used to combine dictionaries rather than merge().
1_2:   Major revision of robust_evolvability() in random_walk.jl.
        With enough samples, the degree evolvability of most goals goes to the maximum possible.
1_3:   Shows that log frequency DOES NOT scale with robustness as is the case when circuits are evolved.
1_4:   Evolving increasing complexity.  Complexity.jl run_explore_complexity()
1_8:   Redo plots for evolvability by sampling.
1_13:  Reran simulations for finding components of neutral networks.  Previous runs were 12_1.
1_15:  Number components vs complexity.  Maximum complexity does increase with k complexity,
        but hard to separate from uncertainties in measuring number of components.
1_17:  Extract component sizes from text files.
       Drop sections from Paper_preview to save space.
1_23:  random_neutral_walk.jl.  neighborhood evolvability vs complexity.
        Shows that nearby (neighborhood) evolvability increases with complexity.
        Used binned circuit complexities.
1_25:  Fitting regression line to scatter plot data using GLM package.
1_26:  regression.jl   Produced a regression properties table.
1_29:  Double plots using layouts.
1_30:  Redo neighbor complexity plot.  neighbor_complexity.jl
1_31:  Redo redundancy vs phenotype rank plot
2_1:   Redo K complexity vs T complexity plot
2_2:   Redo circuit density plot as described in 12_18.txt.
2_4:   Check that every phenotype is mapped to by a genotype for 8 gates, 5 lb.  2 methods.
2_9:   Summarize and create test functions for random walk functions.
2_10:  Ideas on evolvability.
2_11:  Complexity versus evolvability in a mutational neighborhood.  Code:  mutational_evolvability.jl
2_13:  Complexity and robustness versus evolvability in a mutational neighborhood.  Code:  mutational_evolvability.jl
2_15_21:  Redoing NN plots
2_18:  Preliminary ideas on LaBar/Adami replication
2_18_21: More details on redoing NN plots, replicating x axis labels
2_21_21: More details on redoing NN plots, replicating x axis labels
2_22:  Hypotheses to test for LaBar/Adami (2016) simulation:
3_2:  Initial summary of pop-based evolution and LaBar/Adami hypothesis. Selection rescaling.
3_3:  pred_phenos_fits() and preds_fit_decreases()
3_5:  compare_fract_decreases(),  Filtering dataframe by row using @where.
3_7:  Summary of LaBar/Adami test, code in Pop_evolve.jl
3_12: Abandoned LaBar/Adami.  Revisions of explore_complexity() with add/delete gates in Complexity.jl
3_21:  Revised Pop_evolve.jl so that each evolution is to a list of goals rather than a single goal.
        Recall that Pop_evolve.jl is Population-based evolution to try to approximately replicate Labar & Adami 2016.
3_24: Overview of Linear GP representation of circuits.
3_28: Programmed LinChrommosome.jl to implement the linear GP representation of circuits.
3_29: Do circuit sampling for 3x1 circuits using linear GP representation.
      Discovered that all 3x1 goals are reachable using 6 gates and 1 register.
3_31: Gecco reviews summmary
4_3:  Listing some tasks for Gecco rewrite
4_6:  Ran evolvability simulation with only NAND gate and 15 gates and 9 levelsback.
4_8:  Doing a sampling evolvability vs robustness plot using only NAND gate.
4_13: Checking computation of Tononi complexity
4_18: Testing neutral_evolution() on lcircuits.  See 4_24.txt: results not valid.
4_24: Debugged neutral_evolution() (problem: neutral evolution not consistent with mut_evolve()) in Evolve.jl. Fixed bug.
4_25: Testing neutral_evolution() on lcircuits and chromosomes. 
4_30: Summarized conclusions on my ability to evolve parity.
5_3:  Transition to 5x1 goals.  decrease/increase_goal_inputs() in change_goal_inputs.jl
5_6:  Steps for symbiosis.  change_goal_inputs.jl 
5_10: function reduce_numactive() in src/evolve_function.jl and test/test_evolve_function.jl
5_12: effectiveness of test_reduce_numactive() versus run_kolmogorov_complexity() at
   reducing the number of active gates in a combined goal.  REDO
5_15: Revised test_reduce_numactive() in evolve_reduce_numactive.jl to report minimum as well as mean. REDO
5_16: Ran compare_two_vs_one_output() in evolve_reduce_numactive.jl.  REDO
5_17: Discoverd a bug in number_mutations() in Chromosome.jl on lycosa.
5_29:  Found bug in mut_evolve() or mutate_chromsome!().  Fixed on 5/29/21.  test/test_mutate.jl.
6_5:  Tried to get run_env_evolution() in src/Env_evolution.jl and gave up.  
      Moved Env_evolution.jl and Assignment.jl to stash.
6_14: Generated a single-curve "Goal frequencey vs. goal rank" plot for GECCO presentation.
6_17: Redo explore complexity plots for presentation.
6_20: Repeating evolvability/complexity results of 2020/10/27 (2020/10_27) with computation of degeneracy.
6_21: Degeneracy increases with number of gates.  Hypothesis:  increased degeneracy increases resiliancy.
6_25: Rerun core algorithms on evolution evolvability with 3x1 6 gates, 4 lb.
6_29: Results with K-complexity 6 and 7.  8 phenotypes with K-complexity 6 and zero robustness.


All plots:
Goal Frequency vs Goal Rank: PPfig2 data/10_18
Evolvability vs log freq PPfig3 diary10_11
Average of Q vs number goals sampled PPfig4  data/9_14/evolvable9_14D.xlxs   Not current
Evolvability vs robustness PPfig5 data/10_11/geno_robust_evo10_11E.csv
complexity vs robustness PPfig6 data/10_11/geno_robust_evo10_11E.csv1
complexity vs evolvability  PPfig7 data/10_11/ geno_robust_evo10_11E.csv
evolvability vs epi_total PPfig8 data/9_25
robustness vs log_freq PPfig9 diary10_11
evolvability vs log_freq PPfig10 diary10_11
complexity vs log_freq PPfig11 diary10_11
average complexity of neighbors vs circut complexity PPfig12 data/10_11/geno_robust_evo10_11E.csv
log steps vs complexity  PPfig13 diary10_27.txt and data/10_27
log steps vs log frequency PPfig14 diary10_27.txt and data/10_27
log frequency vs complexity PPfig15 diary10_27.txt and data/10_27/geno_complexity10_27Fncons_logfreq_vs_complexity.png

Note that all plots in Complexity_frequency_difficulty_evolution10_30_20.docx are copies of some of the above plots.


