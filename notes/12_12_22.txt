Working on DFAs (discrete finite automata).

See OneDrive/evotech/FA and src/DFA.jl.
# Code based on "Enumeration and generation with a string automata representation"
#   by Marco Almeida, Nelma Moreira, Rogerio Reis, (2007).

include("DFA.jl")
# Construct transition function delta for the example of section 3 of the paper.
julia> delta = construct_delta()
Dict{Tuple{Int64, Int64}, Int64} with 12 entries:
  (1, 2) => 2
  (3, 1) => 2
  (1, 3) => 1
  (3, 2) => 4
  (3, 3) => 1
  (4, 1) => 3
  (2, 1) => 4
  (4, 2) => 4
  (2, 2) => 1
  (4, 3) => 2
  (2, 3) => 2
  (1, 1) => 3
julia> state_sequence( 4, 3, delta )
m: 1  s: 1  j: 1  delta[(s,j)]: 3
m: 2  ss: [1, 3, 0, 0]
m: 2  s: 1  j: 1  delta[(s,j)]: 3
m: 2  s: 1  j: 2  delta[(s,j)]: 2
m: 3  ss: [1, 3, 2, 0]
m: 3  s: 3  j: 1  delta[(s,j)]: 2
m: 3  s: 3  j: 2  delta[(s,j)]: 4
m: 4  ss: [1, 3, 2, 4]
4-element Vector{Int64}:
[1, 3, 2, 4]
julia> sr=string_representation( 4,3,delta );
m: 1  s: 1  j: 1  delta[(s,j)]: 3
m: 2  ss: [1, 3, 0, 0]
m: 2  s: 1  j: 1  delta[(s,j)]: 3
m: 2  s: 1  j: 2  delta[(s,j)]: 2
m: 3  ss: [1, 3, 2, 0]
m: 3  s: 3  j: 1  delta[(s,j)]: 2
m: 3  s: 3  j: 2  delta[(s,j)]: 4
m: 4  ss: [1, 3, 2, 4]
i: 1  st: 1  j: 1  st_seq[st]: 1  st_seq[delta[(st_seq[st],j)]]: 2
i: 2  st: 1  j: 2  st_seq[st]: 1  st_seq[delta[(st_seq[st],j)]]: 3
i: 3  st: 1  j: 3  st_seq[st]: 1  st_seq[delta[(st_seq[st],j)]]: 1
i: 4  st: 2  j: 1  st_seq[st]: 3  st_seq[delta[(st_seq[st],j)]]: 3
i: 5  st: 2  j: 2  st_seq[st]: 3  st_seq[delta[(st_seq[st],j)]]: 4
i: 6  st: 2  j: 3  st_seq[st]: 3  st_seq[delta[(st_seq[st],j)]]: 1
i: 7  st: 3  j: 1  st_seq[st]: 2  st_seq[delta[(st_seq[st],j)]]: 4
i: 8  st: 3  j: 2  st_seq[st]: 2  st_seq[delta[(st_seq[st],j)]]: 1
i: 9  st: 3  j: 3  st_seq[st]: 2  st_seq[delta[(st_seq[st],j)]]: 3
i: 10  st: 4  j: 1  st_seq[st]: 4  st_seq[delta[(st_seq[st],j)]]: 2
i: 11  st: 4  j: 2  st_seq[st]: 4  st_seq[delta[(st_seq[st],j)]]: 4
i: 12  st: 4  j: 3  st_seq[st]: 4  st_seq[delta[(st_seq[st],j)]]: 3
julia> map(r->r-1,sr)
12-element Vector{Int64}:
[1,2,0,2,3,0,3,0,2,1,3,2]
[1,2,0,2,3,0,3,0,2,1,3,2]
julia> phi( n, k, delta )
(s,j,i): (1, 1, 3)  phi_rep: [1, 0, 2, 0]  phi_inv: [1, 3, 0, 0]
(s,j,i): (1, 2, 3)  phi_rep: [1, 3, 2, 0]  phi_inv: [1, 3, 2, 0]
(s,j,i): (1, 3, 3)  phi_rep: [1, 3, 2, 0]  phi_inv: [1, 3, 2, 0]
(s,j,i): (2, 1, 3)  phi_rep: [1, 3, 2, 0]  phi_inv: [1, 3, 2, 0]
(s,j,i): (2, 2, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (2, 3, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (3, 1, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (3, 2, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (3, 3, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (4, 1, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (4, 2, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
(s,j,i): (4, 3, 3)  phi_rep: [1, 3, 2, 4]  phi_inv: [1, 3, 2, 4]
([1, 3, 2, 4], [1, 3, 2, 4])

# Need another example.
