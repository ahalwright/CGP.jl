Worked on trying to write inverse functions for the circuit_code() and circuit_int() functions.
In doing so, I found bugs in both circuit_int() and circuit_code().  
I think I corrected the error in circuit_int().  Here are a couple exampls that should the
problems with circuit_code():

julia> p
Parameters(1, 4, 0.05, 0.0, 2, 1, 2, 2, 3)
julia> funcs
1-element Array{Func,1}:
 Func(Main.CGP.Nand, 2, "NAND")
julia> c=circuit((1,2), ((3,NAND,1,1), (4,NAND,1,1)))
julia> cc = circuit_code(c); transpose(cc)
1×6 LinearAlgebra.Transpose{Int64,Array{Int64,1}}:
 0  2  2  0  1  1
julia> c = circuit((1,2), ((3,NAND,1,1), (4,NAND,2,2))) 
julia> cc = circuit_code(c); transpose(cc)
1×6 LinearAlgebra.Transpose{Int64,Array{Int64,1}}:
 0  2  2  0  2  2

The problem is that the the indices for the first circuit are at their minimum values,
so the corresponding circuit codes should be 0, and they are not.

Thus, at this time neither of the inverse functions code_to_circuit() and int_to_circuit_code()
are correct.  (Both are in Chromosome.jl.)

