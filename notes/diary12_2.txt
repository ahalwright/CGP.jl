Predicting evolvability from repeated sampling.
Sets up a linear regression to predict y = log_evo_count_diff which is the number of new
  phenotypes discovered on each step.  The x variable is map(log10,collect(1:16)).
Seems to work.
Conclusion:  However, as shown below, predicts convergence to more than the number
of phenotypes for the rare goal.  So can't be correct.


julia> bdf = select!(bdf,DataFrames.Not([:epi2,:epi3,:epi4,:epi_total,:f_mutrobust]))
julia> bdf.evo_count_diff = zeros(Float64,16);
julia> bdf.evo_count_diff[1]=bdf.evo_counts[1]
julia> bdf.evo_count_diff[2:16] = [bdf.evo_count[i]-bdf.evo_count[i-1] for i = 2:16]

julia> bdf.log_ev_diff = map(log10,bdf.evo_count_diff)
julia> ddf.log_ev_diff = map(log10,ddf.evo_count_diff)

julia> scatter(map(log10,collect(1:16)),[ddf.log_ev_diff,bdf.log_ev_diff])

julia> bdf.logsteps = map(log10,collect(1:16)); 
julia> ddf.logsteps = map(log10,collect(1:16)); 
julia> bls = lm(@formula(logsteps ~ log_ev_diff),bdf)  # Gives regression intercept and slope
julia> dls = lm(@formula(logsteps ~ log_ev_diff),ddf)

julia> ddf.reg_eq = [3.48269-0.838861*bdf.logsteps[i] for i = 1:16] 
julia> ddf.reg_eq = [3.48269-0.838861*bdf.logsteps[i] for i = 1:16] 


rb = cor(logsteps,bdf.log_ev_diff)
mb = rb*std(bdf.log_ev_diff)/std(logsteps)
bb = mean(bdf.log_ev_diff)-mb*mean(logsteps)
bdf.reg_eq = [bb+mb*logsteps[i] for i = 1:16]
[bdf.reg_eq[i]-bdf.log_ev_diff[i] for i = 1:16]
rd = cor(logsteps,ddf.log_ev_diff)
md = rd*std(ddf.log_ev_diff)/std(logsteps)
bd = mean(ddf.log_ev_diff)-md*mean(logsteps)
ddf.reg_eq = [bd+md*logsteps[i] for i = 1:16]
[ddf.reg_eq[i]-ddf.log_ev_diff[i] for i = 1:16]

julia> dreg_eq = [bd+md*logstepsd[i] for i = 1:nreps];
julia> d_proj = map(x->10^x,dreg_eq)
4096-element Array{Float64,1}:
 13739.488759486208 
 ...
 0.7788807749589503
 0.7786571741684721
 0.7784336921424185 
julia> sum(d_proj)
68184.66619062565   # shows that this must be an over-estimate.

julia> breg_eq = [bb+mb*logstepsb[i] for i = 1:nreps];
julia> b_proj = map(x->10^x,breg_eq)
4096-element Array{Float64,1}:
 4625.519860255051 
 ...
 1.6179131220118914
 1.6175350821443453
 1.6171572228830071 
julia> sum(b_proj)
48944.7385501655 
