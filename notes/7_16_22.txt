Idea:  Define total evolvability which is the combination of evolvability in both directions.
See the function total_evolvability() in evolvable_evolvability.jl which is a 2-line definition.

plot([sort(df.t_evolvability),sort(df.e_evolvability),sort(df.s_evolvability)],labels=["total evolvability" "evolution evolvability" "samplingevolvability"])
plot!(ylabel="Evolvability", xlabel="rank", title="Sorted total, evolution, sampling evolvabilities")
plot!(legend=:topleft)
savefig("../data/7_8_22/total_evolution_sampling_evolvabilities_3x1_7gt4lb.png")


scatter(pdf.t_evolvability,pdf.complexity,labels=:none)
scatter!(xlabel="total evolvability", ylabel="Tononi complexity", title="Tononi complexity vs total evolvability 3x1 7gts4lb")
savefig("../data/7_8_22/total_evol_vs_complexity_3x1_7_4.png")

# Total evolvability vs log redundancy
scatter(pdf.t_evolvability,map(lg10,pdf.ints7_4),labels=:none)
scatter!(xlabel="total evolvability", ylabel="log redundancy",title="log redundancy vs total evolvability 3x1 7gts4lb")
savefig("../data/7_8_22/total_evol_vs_log_redundancy_3x1_7_4.png")

# Total and evolution evolvability vs log redundancy
pdf = read_dataframe("../data/7_8_22/evolvable_evolvability_3x1_7_4ch_scmplxP.csv")
insertcols!(pdf,5,:t_evolvability=>total_evol(pdf))
rename!(pdf,:evolvability=>:e_evolvability)
scatter([pdf.t_evolvability,pdf.e_evolvability],map(lg10,pdf.ints7_4),labels=["total evolvability" "evolution evolvability"])
scatter!(xlabel="evolvability", ylabel="log redundancy",title="log redundancy vs evolvability 3x1 7gts4lb")
scatter!(legend=:bottomright)
savefig("../data/7_8_22/total_evolution_evol_vs_log_redundancy_3x1_7_4.png")

Specific example:  pheno [0x0a] e_evolvability=152 t_evolvability=243 redundancy=149312004

============================================================================================
Shaps space coverage:  ShapeSpace.jl

data/7_16_22/run_common_coverageD.jl
pdf = read_dataframe("../data/7_8_22/evolvable_evolvability_3x1_7_4ch_scmplxP.csv")
circuits_per_goal_list = [1,1]   # start from a single circuit
goal_list = map( x->[MyInt(x)], 0:255 )
num_mutates = 3   # 3-neighborhood of circuit 
quant = 0.8    # Quantile to define common circuits
# Results
findall(x->x==1.0,cdf.fract_covered)
    184-element Vector{Int64}:   # For 184 of 256 starting phenotypes the 3-neighborhood of one circiut contains all of the common phenotypes defined with quantile = 0.8
mean(cdf.fract_covered)
    0.9867

data/7_16_22/run_common_coverageE.jl
circuits_per_goal_list = [1,4,8]
goal_list = map( x->[MyInt(x)], 0:255 )
num_mutates = 2
quant = 0.8    # Quantile to define phenos_to_cover
# Results
findall(x->x==1.0,cdf.fract_covered)
    155-element Vector{Int64}:   # For 155 of 256 starting phenotypes the 2-neighborhood of 8 circuits contains all of the common phenotypes defined with quantile = 0.8
mean(cdf.fract_covered)
    0.9873
