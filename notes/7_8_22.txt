Procedures for generating data for cce/Evolvability_and_shape_space_covering7_7_22.docx

See notes/7_16_22.txt for procedures for generating plots in data/7_8_22

cdf = read_dataframe("../data/6_25_22/count_outputs_ch_4funcs_3inputs_7gates_4lb_cmplxC.csv")
rare =  [[0x0049], [0x0061], [0x0069], [0x006d], [0x0079], [0x0086], [0x0092], [0x0096], [0x009e], [0x00b6]];
# rare =  0x49, 0x61, 0x69, 0x6d, 0x79, 0x86, 0x92, 0x96, 0x9e, 0xb6;
common = [[0x0000], [0x0003], [0x0005], [0x0011], [0x0022], [0x0033], [0x003f], [0x0044], [0x0055], [0x005f], [0x0077], [0x0088], [0x00a0], [0x00aa], [0x00bb], [0x00c0], [0x00cc], [0x00dd], [0x00ee], [0x00fa], [0x00fc], [0x00ff]];
# common = 0x00, 0x03, 0x05, 0x11, 0x22, 0x33, 0x3f, 0x44, 0x55, 0x5f, 0x77, 0x88, 0xa0, 0xaa, 0xbb, 0xc0, 0xcc, 0xdd, 0xee, 0xfa, 0xfc, 0xff;
rare_str = map(x->@sprintf("0x%04x",x[1]),rare)
common_str = map(x->@sprintf("0x%04x",x[1]),common)
rare_b = map(i->cdf.goals[i] in rare_str, 1:256);  
rcdf = cdf[rare_b,:]   # cdf restricted to rare goals
nrcdf = cdf[map(~,rare_b),:]   # cdf restricted to non-rare goals
findmax(rcdf.ints7_4)   
# (1903, 7)
findmin(nrcdf.ints7_4)  
# (5231, 42)
findmin(rcdf.complexity)   
# (3.360555700305864, 10)
findmax(nrcdf.complexity)  
# (3.4504897759465614, 117)

common_b = map(i->cdf.goals[i] in common_str, 1:256)
ccdf = cdf[common_b,:]  # cdf restricted to common goals
nccdf = cdf[map(~,common_b),:]   # cdf restricted to non-common goals
findmin(ccdf.ints7_4)
# (121062232, 2)
findmax(nccdf.ints7_4)
# (92496706, 13)
findmax(ccdf.complexity)
# (2.423989903072447, 18)
findmin(nccdf.complexity)
# (1.8906311887813407, 117)

====================================================================================
Revised evolvable_evolvability.jl to separately compute circuit_list. 
Objective:  add complexity to the dataframe
Discovered a bug in the previous version of evolvable_evolvability.jl.  (see stash/evolvable_evolvability7_7_22.jl)

p  = Parameters(2,1,4,4); funcs = default_funcs(p)
ph_list = [[0x0003],[0x0005]]
ncircuits = 10
max_tries=20; max_steps=200000
evolvable_pheno_df( p, funcs, ph_list, ncircuits, max_tries, max_steps)
2×4 DataFrame
 Row │ pheno_list  evolvability  complexity  pheno_vects
     │ String      Int64         Float64     Array…
─────┼─────────────────────────────────────────────────────────────────────────
   1 │ 0x0003                11    0.954637  [12, 16, 22, 176, 0, 0, 0, 14, 0…
   2 │ 0x0005                13    0.73985   [21, 14, 1, 0, 9, 171, 0, 19, 1,…

ci_list = Vector{Int128}[[605168, 139867, 1198495, 707768], [1054132, 1043892, 2032223, 586187], [1531716, 2099323, 1234679, 1694896], [377765, 580205, 1536189, 1220415], [918376, 1792975, 629967, 701275], [1967047, 1750322, 485059, 1955731], [1671259, 1229303, 1578076, 1496740], [1534911, 1386921, 367022, 1220498], [1484758, 2314336, 569383, 1789229], [1530906, 1049509, 907930, 1673829], [1693501, 2169920, 2348662, 1814477], [699580, 494629, 580869, 1880869], [1047599, 744360, 429787, 34868], [1606022, 1872078, 604130, 322850], [21585, 538593, 1694349, 1056854], [784565, 2175174, 1468126, 206382]]
evolvable_pheno_df( p, funcs, [[0x0003],[0x0005]], 10, max_tries, max_steps, circ_int_lists=ci_list )
2×4 DataFrame
 Row │ pheno_list  evolvability  complexity  pheno_vects
     │ String      Int64         Float64     Array…
─────┼─────────────────────────────────────────────────────────────────────────
   1 │ 0x0003                12    0.904057  [67, 3, 15, 5, 2, 2, 0, 4, 10, 0…
   2 │ 0x0005                12    1.01706   [13, 63, 4, 1, 9, 17, 0, 1, 3, 0…
