  [wright@pardosa src]$ fgrep function entropy.jl 
  9:function dist_check( p::DIST_TYPE )
  22:function pop_to_dist( pop::IPopulation )
  34:function pop_to_dist( pop::FPopulation )
  46:function pop_to_dist( pop::MIPopulation )
  58:function pop_to_dist( pop::SPopulation )
  75:function pops_to_tbl( P::Vector{Population} )
  98:function pops_to_tbl( P::Vector{FPopulation} )
  112:function pops_to_dist( P1::IPopulation, P2::IPopulation )
  126:function pops_to_dist( P1::MIPopulation, P2::MIPopulation )
  142:function pop_counts_to_tbl( D::DataFrame, columns::Vector{Int64}=collect(1:(div(size(D)[2],2))))
  173:function pops_to_table( P1::Population, P2::Population )
  179:function table_row_to_dist( tbl::Array{Float64,2}, row_index::Int64 )
  189:function row_marginal( tbl::Array{Float64,2} )
  193:function column_marginal( tbl::Array{Float64,2} )
  197:function entropy( p::DIST_TYPE; base::Float64=2.0 )
  208:function entropy( p::IPopulation; base::Float64=2.0 )
  212:function entropy( p::MIPopulation; base::Float64=2.0 )
  217:function entropy( p::SPopulation; base::Float64=2.0 )
  226:function entropy( p::Vector{Float64}; base::Float64=2.0 )
  233:function entropy( tbl::Array{Float64,2}, row_index::Int64; base::Float64=2.0 )
  242:function relative_entropy( p::DIST_TYPE, q::DIST_TYPE; base::Float64=2.0 )
  257:function relative_entropy( q::IPopulation, p::IPopulation; base::Float64=2.0 )
  261:function relative_entropy( q::SPopulation, p::SPopulation; base::Float64=2.0 )
  265:function relative_entropy( p::Vector{Float64}, q::Vector{Float64}; base::Float64=2.0 )
  281:function conditional_entropy( tbl::Array{Float64,2}, rows::Vector{Int64}=collect(1:size(tbl)[1]); base::Float64=2.0 )
  300:function joint_entropy( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  308:function joint_entropy( P1::MIPopulation, P2::MIPopulation; base::Float64=2.0 )
  314:function joint_entropy( tbl::Array{Float64,2}; base::Float64=2.0 )
  316:    error("all entries of tbl must be non-netative in function joint entropy")
  329:function joint_entropy( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  336:function mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  338:    error("all entries of tbl must be non-netative in function mutual information")
  354:function sherwin_mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  368:function sherwin_mutual_information( tbl::Array{Float64,2}; base::Float64=2.0 )
  381:function mutual_information( P1::FPopulation, P2::FPopulation; base::Float64=2.0 )
  385:function mutual_information( D::DataFrame, columns::Vector{Int64}=collect(1:(div(size(D)[2],2))); base::Float64=2.0 )
  390:function mutual_information( P1::MIPopulation, P2::MIPopulation; base::Float64=2.0 )
  396:function mutual_information( P1::IPopulation, P2::IPopulation; base::Float64=2.0 )
  402:function mutual_information( P::Vector{FPopulation}; base::Float64=2.0 )
  406:function mutual_information( P::Vector{MIPopulation}; base::Float64=2.0 )
  410:function mutual_information( P::Vector{IPopulation}; base::Float64=2.0 )
  414:function mutual_information( P::Vector{SPopulation}; base::Float64=2.0 )
