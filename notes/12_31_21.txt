Test of find_neutral_comps() for LinCircuits on lycosa.
julia> p = Parameters(2,1,3,2)
funcs = default_funcs(p.numinputs)  # 4 funcs
julia> @time ecl = enumerate_circuits_lc( p, funcs); length(ecl)
  2.793042 seconds (20.38 M allocations: 1.523 GiB, 32.69% gc time)
# 2097152
julia> find_neutral_comps( ecl, 0x0003, funcs )
# Fairly quickly used up all memory on lyocsa

Note:  Neutral_components_examples12_30_21.xlsx is in data/12_31_21/

Alternative method:
julia> (df,P) = pheno_counts_lc( p, funcs, output_vect=true ) 
julia> fa_0x06=findall(x->x==0x0006,P)
64-element Vector{Int64}:
julia> fa_0x06 = map(x->x-1,fa_0x06)
64-element Vector{Int64}:
  196065
  196068
  196449
  196452
  245217
  ...
julia> ovals=map(x->output_values(circuit_int_to_circuit(Int128(x),p,funcs)),fa_0x06)
64-element Vector{Vector{UInt16}}:
 [0x0006]
 [0x0006]
  ...
julia> @assert ovals == fill([0x0006],length(ovals))
# succeeds

# TODO:  fix mutate_all() for LinCircuits to have the same keyword arguments as mutate_all() for chromosomes
# Then maybe find_neutral_comps() can have a single definition.    
# Maybe using P generated by pheno_counts_lc() or pheno_counts_ch() is faster than computing output values
#   IF there is sufficient memory to store P.





