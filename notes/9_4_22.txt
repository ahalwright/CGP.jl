# Reducing length(funcs) increases T complexity
df5 = read_dataframe("../data/counts/k_complexity_3x1_5funcs7_11_22F.csv")
df4 = read_dataframe("../data/counts/k_complexity_3x1_4funcs7_11_22E.csv")
mean(df5.complexity)
0.41460317051894297
mean(df4.complexity)
0.930239601510601

Cooper assignment:

I need a function to compute a dataframe that shows the relationship between the K complexity of phenotypes
and the number of neutral evolution steps to evolve a circuit to phenotypes of that K complexity.

Example result dataframe:

Row  │ K complexity  numphenos  numcircuits   mean_steps   median_steps  std_steps    
     │ Float64        Int64      Float64      Float64       Float64      Float64    
─────┼────────────────────────────────────────────────────────────────────────────────────────
   1 │         1        21           4         5919.0          1028.6       649.12      
   2 │         2        54           4         8478.0          931.6       1213.14      
...

In this example partial dataframe, row 1 summarizes results for all phenotypes with K complexity 1, 
row 2 summarizes results for all phenotypes with K complexity 2, etc.

21 phenotypes were found in phlist with K complexity 1, 54 with K complexity 2, etc.
See below for how to determine the K complexity of a phenotype.

For each phenotype 4 circuits were attempted to be evolved (this is an input parameter).

In this dataset, there were 21 phenotypes with K complexity 1, 54 with K complexity 2, etc.  
Data values are made up.

mean_steps is the average number of neutral evolution steps for to evolve a circuit to a given phenotype.
median_steps and std_steps are similar (std is standard deviation).

Your function will have parameters, funcs, numcircuits, max_tries, and max_steps as inputs since these
are needed to call pheno_evolve().  It will also have phlist as an input. 

You can generate a list of all 3x1 phenotypes with:
phlist = map(x->[x], 0x0000:0x00ff )   # returns the list of [x] for every UInt16 x from 0x0000 to 0x00ff 
An example phenotype is [0x0049].  This assumes that MyInt is set to UInt16 in src/CGP.jl

There is a useful function kolmogorov_complexity_dict( p::Parameters ) in Complexity.jl that returns a Dict
that maps MyInts to K complexities  Example:
  julia> p = Parameters(3,1,8,4)
     Parameters(1, 4, 0.05, 0.0, 3, 1, 2, 8, 4)

  julia> funcs = default_funcs(p)
     4-element Vector{Func}:
     Func(&, 2, "AND")
     Func(|, 2, "OR")
     Func(Main.CGP.Nand, 2, "NAND")
     Func(Main.CGP.Nor, 2, "NOR")
    
  julia> kdict = kolmogorov_complexity_dict(p,funcs)
     k_csvfile: ../data/counts/k_complexity_3x1_5funcs7_11_22F.csv
     Dict{UInt16, Int64} with 256 entries:
       0x0038 => 3
       0x0023 => 3
       ...
    
  julia> kdict[0x0049]   # 0x0049 is a UInt16 integer, where type MyInt == UInt16.   See src/CGP.jl where MyInt is assigned.
     6    # value will be different if funcs has 5 elements instead of 4.

Your function can call the second version of pheno_evolve() in Evolve.jl to do the evolutions.
Read this function definition carefully.  See  test/test_pheno_evolve.jl.  Read this file carefully.

If you find that you need to modify pheno_evolve(), that is OK.

Your function can be approximately derived from run_pheno_evolve() in Evolve.jl.

I care much more about a reasonably quick reply than I do about achieving good results.

If you get stuck or don't know what to do, contact me.

