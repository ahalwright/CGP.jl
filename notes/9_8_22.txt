Cooper assignment:

I need a function to compute a dataframe that shows the relationship between the K complexity of phenotypes
and the number of neutral evolution steps to evolve a circuit to phenotypes of that K complexity.

There will be two parts to the assignment: 

First, you will generate a dataframe with one row per phenotype.  For each phenotype, your function
will attempt to evolve numcircuits genotypes using neutral evolution with parameter max_steps.
You will make up to max_tries neutral evolution attepts, each starting with a random chromosome.
A failure is when all of these attempts fail.  The number of steps is the sum of the number of steps
on each try.  So if neutral_evolution fails twice with 200000 steps and then succeeds with 68214 steps,
the number of steps is 468214.  Then the mean, media, standard deviation is over the numcircuits attempts.

Example result dataframe:

Row  │ Goal     K complexity  numircuits   max_tries  max_steps  failures   mean_steps   median_steps  std_steps    
     │ UIn16     Float64        Int64      Int64        Int64     Int64      Float64       Float64      
─────┼───────────────────────────────────────────────────────────────────────────────────────
   1 │ 0x0019      3             5          3          200000       1       5919.0          1028.6       649.12      
   2 │ 0x0029      4             5          3          200000       2       8478.0          931.6       1213.14      
...


For each phenotype 5 circuits were attempted to be evolved (this is an input parameter).

For each of the 5 attempts, neutral evolution can run be up to 3 times.  A failure is when
all of these runs fail due to the step limit.

Your function will have parameters, funcs, numcircuits, max_tries, and max_steps as inputs since these
are needed to call pheno_evolve().  It will also have phlist as an input. 

You can generate a list of all 3x1 phenotypes with:
phlist = map(x->[x], 0x0000:0x00ff )   # returns the list of [x] for every UInt16 x from 0x0000 to 0x00ff 
An example phenotype is [0x0049].  This assumes that MyInt is set to UInt16 in src/CGP.jl

There is a useful function kolmogorov_complexity_dict( p::Parameters ) in Complexity.jl that returns a Dict
that maps MyInts to K complexities  Example:
  julia> p = Parameters(3,1,8,4)
     Parameters(1, 4, 0.05, 0.0, 3, 1, 2, 8, 4)

  julia> funcs = default_funcs(p)
     4-element Vector{Func}:
     Func(&, 2, "AND")
     Func(|, 2, "OR")
     Func(Main.CGP.Nand, 2, "NAND")
     Func(Main.CGP.Nor, 2, "NOR")
    
  julia> kdict = kolmogorov_complexity_dict(p,funcs)
     k_csvfile: ../data/counts/k_complexity_3x1_5funcs7_11_22F.csv
     Dict{UInt16, Int64} with 256 entries:
       0x0038 => 3
       0x0023 => 3
       ...

For some parameter settings it won't work.  See the code.
    
  julia> kdict[0x0049]   # 0x0049 is a UInt16 integer, where type MyInt == UInt16.   See src/CGP.jl where MyInt is assigned.
     6    # value will be different if funcs has 5 elements instead of 4.

If you find that you need to modify pheno_evolve(), that is OK.

Your function can be approximately derived from run_pheno_evolve() in Evolve.jl.

If you get stuck or don't know what to do, contact me.

The second part of the assignment will take this dataframe as input and summarize it.  
Details will follow.

